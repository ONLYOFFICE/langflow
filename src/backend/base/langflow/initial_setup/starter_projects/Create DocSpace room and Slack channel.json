{
  "data": {
    "edges": [
      {
        "animated": false,
        "className": "",
        "data": {
          "sourceHandle": {
            "dataType": "TextInput",
            "id": "TextInput-CgzMc",
            "name": "text",
            "output_types": [
              "Message"
            ]
          },
          "targetHandle": {
            "fieldName": "base_url",
            "id": "OnlyofficeDocspaceBasicAuthentication-xkoe6",
            "inputTypes": [
              "Message"
            ],
            "type": "str"
          }
        },
        "id": "reactflow__edge-TextInput-CgzMc{œdataTypeœ:œTextInputœ,œidœ:œTextInput-CgzMcœ,œnameœ:œtextœ,œoutput_typesœ:[œMessageœ]}-OnlyofficeDocspaceBasicAuthentication-xkoe6{œfieldNameœ:œbase_urlœ,œidœ:œOnlyofficeDocspaceBasicAuthentication-xkoe6œ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
        "selected": false,
        "source": "TextInput-CgzMc",
        "sourceHandle": "{œdataTypeœ:œTextInputœ,œidœ:œTextInput-CgzMcœ,œnameœ:œtextœ,œoutput_typesœ:[œMessageœ]}",
        "target": "OnlyofficeDocspaceBasicAuthentication-xkoe6",
        "targetHandle": "{œfieldNameœ:œbase_urlœ,œidœ:œOnlyofficeDocspaceBasicAuthentication-xkoe6œ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}"
      },
      {
        "animated": false,
        "className": "",
        "data": {
          "sourceHandle": {
            "dataType": "TextInput",
            "id": "TextInput-CgzMc",
            "name": "text",
            "output_types": [
              "Message"
            ]
          },
          "targetHandle": {
            "fieldName": "text1",
            "id": "CombineText-Uk8dL",
            "inputTypes": [
              "Message"
            ],
            "type": "str"
          }
        },
        "id": "reactflow__edge-TextInput-CgzMc{œdataTypeœ:œTextInputœ,œidœ:œTextInput-CgzMcœ,œnameœ:œtextœ,œoutput_typesœ:[œMessageœ]}-CombineText-Uk8dL{œfieldNameœ:œtext1œ,œidœ:œCombineText-Uk8dLœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
        "selected": false,
        "source": "TextInput-CgzMc",
        "sourceHandle": "{œdataTypeœ:œTextInputœ,œidœ:œTextInput-CgzMcœ,œnameœ:œtextœ,œoutput_typesœ:[œMessageœ]}",
        "target": "CombineText-Uk8dL",
        "targetHandle": "{œfieldNameœ:œtext1œ,œidœ:œCombineText-Uk8dLœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}"
      },
      {
        "animated": false,
        "className": "",
        "data": {
          "sourceHandle": {
            "dataType": "CombineText",
            "id": "CombineText-Uk8dL",
            "name": "combined_text",
            "output_types": [
              "Message"
            ]
          },
          "targetHandle": {
            "fieldName": "text1",
            "id": "CombineText-sccCA",
            "inputTypes": [
              "Message"
            ],
            "type": "str"
          }
        },
        "id": "reactflow__edge-CombineText-Uk8dL{œdataTypeœ:œCombineTextœ,œidœ:œCombineText-Uk8dLœ,œnameœ:œcombined_textœ,œoutput_typesœ:[œMessageœ]}-CombineText-sccCA{œfieldNameœ:œtext1œ,œidœ:œCombineText-sccCAœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
        "selected": false,
        "source": "CombineText-Uk8dL",
        "sourceHandle": "{œdataTypeœ:œCombineTextœ,œidœ:œCombineText-Uk8dLœ,œnameœ:œcombined_textœ,œoutput_typesœ:[œMessageœ]}",
        "target": "CombineText-sccCA",
        "targetHandle": "{œfieldNameœ:œtext1œ,œidœ:œCombineText-sccCAœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}"
      },
      {
        "animated": false,
        "className": "",
        "data": {
          "sourceHandle": {
            "dataType": "CombineText",
            "id": "CombineText-sccCA",
            "name": "combined_text",
            "output_types": [
              "Message"
            ]
          },
          "targetHandle": {
            "fieldName": "text2",
            "id": "CombineText-mihFO",
            "inputTypes": [
              "Message"
            ],
            "type": "str"
          }
        },
        "id": "reactflow__edge-CombineText-sccCA{œdataTypeœ:œCombineTextœ,œidœ:œCombineText-sccCAœ,œnameœ:œcombined_textœ,œoutput_typesœ:[œMessageœ]}-CombineText-mihFO{œfieldNameœ:œtext2œ,œidœ:œCombineText-mihFOœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
        "selected": false,
        "source": "CombineText-sccCA",
        "sourceHandle": "{œdataTypeœ:œCombineTextœ,œidœ:œCombineText-sccCAœ,œnameœ:œcombined_textœ,œoutput_typesœ:[œMessageœ]}",
        "target": "CombineText-mihFO",
        "targetHandle": "{œfieldNameœ:œtext2œ,œidœ:œCombineText-mihFOœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}"
      },
      {
        "animated": false,
        "className": "",
        "data": {
          "sourceHandle": {
            "dataType": "TextInput",
            "id": "TextInput-k2gnd",
            "name": "text",
            "output_types": [
              "Message"
            ]
          },
          "targetHandle": {
            "fieldName": "text1",
            "id": "CombineText-mihFO",
            "inputTypes": [
              "Message"
            ],
            "type": "str"
          }
        },
        "id": "reactflow__edge-TextInput-k2gnd{œdataTypeœ:œTextInputœ,œidœ:œTextInput-k2gndœ,œnameœ:œtextœ,œoutput_typesœ:[œMessageœ]}-CombineText-mihFO{œfieldNameœ:œtext1œ,œidœ:œCombineText-mihFOœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
        "selected": false,
        "source": "TextInput-k2gnd",
        "sourceHandle": "{œdataTypeœ:œTextInputœ,œidœ:œTextInput-k2gndœ,œnameœ:œtextœ,œoutput_typesœ:[œMessageœ]}",
        "target": "CombineText-mihFO",
        "targetHandle": "{œfieldNameœ:œtext1œ,œidœ:œCombineText-mihFOœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}"
      },
      {
        "animated": false,
        "className": "",
        "data": {
          "sourceHandle": {
            "dataType": "TextInput",
            "id": "TextInput-k2gnd",
            "name": "text",
            "output_types": [
              "Message"
            ]
          },
          "targetHandle": {
            "fieldName": "title",
            "id": "OnlyofficeDocspaceCreateRoom-Uf3Xb",
            "inputTypes": [
              "Message"
            ],
            "type": "str"
          }
        },
        "id": "reactflow__edge-TextInput-k2gnd{œdataTypeœ:œTextInputœ,œidœ:œTextInput-k2gndœ,œnameœ:œtextœ,œoutput_typesœ:[œMessageœ]}-OnlyofficeDocspaceCreateRoom-Uf3Xb{œfieldNameœ:œtitleœ,œidœ:œOnlyofficeDocspaceCreateRoom-Uf3Xbœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
        "selected": false,
        "source": "TextInput-k2gnd",
        "sourceHandle": "{œdataTypeœ:œTextInputœ,œidœ:œTextInput-k2gndœ,œnameœ:œtextœ,œoutput_typesœ:[œMessageœ]}",
        "target": "OnlyofficeDocspaceCreateRoom-Uf3Xb",
        "targetHandle": "{œfieldNameœ:œtitleœ,œidœ:œOnlyofficeDocspaceCreateRoom-Uf3Xbœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}"
      },
      {
        "animated": false,
        "className": "",
        "data": {
          "sourceHandle": {
            "dataType": "OnlyofficeDocspaceBasicAuthentication",
            "id": "OnlyofficeDocspaceBasicAuthentication-xkoe6",
            "name": "api_build_text",
            "output_types": [
              "Message"
            ]
          },
          "targetHandle": {
            "fieldName": "auth_text",
            "id": "OnlyofficeDocspaceCreateRoom-Uf3Xb",
            "inputTypes": [
              "Message"
            ],
            "type": "str"
          }
        },
        "id": "xy-edge__OnlyofficeDocspaceBasicAuthentication-xkoe6{œdataTypeœ:œOnlyofficeDocspaceBasicAuthenticationœ,œidœ:œOnlyofficeDocspaceBasicAuthentication-xkoe6œ,œnameœ:œapi_build_textœ,œoutput_typesœ:[œMessageœ]}-OnlyofficeDocspaceCreateRoom-Uf3Xb{œfieldNameœ:œauth_textœ,œidœ:œOnlyofficeDocspaceCreateRoom-Uf3Xbœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
        "selected": false,
        "source": "OnlyofficeDocspaceBasicAuthentication-xkoe6",
        "sourceHandle": "{œdataTypeœ:œOnlyofficeDocspaceBasicAuthenticationœ,œidœ:œOnlyofficeDocspaceBasicAuthentication-xkoe6œ,œnameœ:œapi_build_textœ,œoutput_typesœ:[œMessageœ]}",
        "target": "OnlyofficeDocspaceCreateRoom-Uf3Xb",
        "targetHandle": "{œfieldNameœ:œauth_textœ,œidœ:œOnlyofficeDocspaceCreateRoom-Uf3Xbœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}"
      },
      {
        "animated": false,
        "className": "",
        "data": {
          "sourceHandle": {
            "dataType": "OnlyofficeDocspaceCreateRoom",
            "id": "OnlyofficeDocspaceCreateRoom-Uf3Xb",
            "name": "api_build_data",
            "output_types": [
              "Data"
            ]
          },
          "targetHandle": {
            "fieldName": "input_data",
            "id": "ParserComponent-ep6XV",
            "inputTypes": [
              "DataFrame",
              "Data"
            ],
            "type": "other"
          }
        },
        "id": "xy-edge__OnlyofficeDocspaceCreateRoom-Uf3Xb{œdataTypeœ:œOnlyofficeDocspaceCreateRoomœ,œidœ:œOnlyofficeDocspaceCreateRoom-Uf3Xbœ,œnameœ:œapi_build_dataœ,œoutput_typesœ:[œDataœ]}-ParserComponent-ep6XV{œfieldNameœ:œinput_dataœ,œidœ:œParserComponent-ep6XVœ,œinputTypesœ:[œDataFrameœ,œDataœ],œtypeœ:œotherœ}",
        "selected": false,
        "source": "OnlyofficeDocspaceCreateRoom-Uf3Xb",
        "sourceHandle": "{œdataTypeœ:œOnlyofficeDocspaceCreateRoomœ,œidœ:œOnlyofficeDocspaceCreateRoom-Uf3Xbœ,œnameœ:œapi_build_dataœ,œoutput_typesœ:[œDataœ]}",
        "target": "ParserComponent-ep6XV",
        "targetHandle": "{œfieldNameœ:œinput_dataœ,œidœ:œParserComponent-ep6XVœ,œinputTypesœ:[œDataFrameœ,œDataœ],œtypeœ:œotherœ}"
      },
      {
        "animated": false,
        "className": "",
        "data": {
          "sourceHandle": {
            "dataType": "ParserComponent",
            "id": "ParserComponent-ep6XV",
            "name": "parsed_text",
            "output_types": [
              "Message"
            ]
          },
          "targetHandle": {
            "fieldName": "text2",
            "id": "CombineText-Uk8dL",
            "inputTypes": [
              "Message"
            ],
            "type": "str"
          }
        },
        "id": "xy-edge__ParserComponent-ep6XV{œdataTypeœ:œParserComponentœ,œidœ:œParserComponent-ep6XVœ,œnameœ:œparsed_textœ,œoutput_typesœ:[œMessageœ]}-CombineText-Uk8dL{œfieldNameœ:œtext2œ,œidœ:œCombineText-Uk8dLœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
        "selected": false,
        "source": "ParserComponent-ep6XV",
        "sourceHandle": "{œdataTypeœ:œParserComponentœ,œidœ:œParserComponent-ep6XVœ,œnameœ:œparsed_textœ,œoutput_typesœ:[œMessageœ]}",
        "target": "CombineText-Uk8dL",
        "targetHandle": "{œfieldNameœ:œtext2œ,œidœ:œCombineText-Uk8dLœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}"
      },
      {
        "animated": false,
        "className": "",
        "data": {
          "sourceHandle": {
            "dataType": "ParserComponent",
            "id": "ParserComponent-ep6XV",
            "name": "parsed_text",
            "output_types": [
              "Message"
            ]
          },
          "targetHandle": {
            "fieldName": "text2",
            "id": "CombineText-sccCA",
            "inputTypes": [
              "Message"
            ],
            "type": "str"
          }
        },
        "id": "xy-edge__ParserComponent-ep6XV{œdataTypeœ:œParserComponentœ,œidœ:œParserComponent-ep6XVœ,œnameœ:œparsed_textœ,œoutput_typesœ:[œMessageœ]}-CombineText-sccCA{œfieldNameœ:œtext2œ,œidœ:œCombineText-sccCAœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
        "selected": false,
        "source": "ParserComponent-ep6XV",
        "sourceHandle": "{œdataTypeœ:œParserComponentœ,œidœ:œParserComponent-ep6XVœ,œnameœ:œparsed_textœ,œoutput_typesœ:[œMessageœ]}",
        "target": "CombineText-sccCA",
        "targetHandle": "{œfieldNameœ:œtext2œ,œidœ:œCombineText-sccCAœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}"
      },
      {
        "animated": false,
        "className": "",
        "data": {
          "sourceHandle": {
            "dataType": "DataMapper",
            "id": "DataMapper-bc8pD",
            "name": "data",
            "output_types": [
              "Data"
            ]
          },
          "targetHandle": {
            "fieldName": "input_data",
            "id": "ParserComponent-cPUXq",
            "inputTypes": [
              "DataFrame",
              "Data"
            ],
            "type": "other"
          }
        },
        "id": "xy-edge__DataMapper-bc8pD{œdataTypeœ:œDataMapperœ,œidœ:œDataMapper-bc8pDœ,œnameœ:œdataœ,œoutput_typesœ:[œDataœ]}-ParserComponent-cPUXq{œfieldNameœ:œinput_dataœ,œidœ:œParserComponent-cPUXqœ,œinputTypesœ:[œDataFrameœ,œDataœ],œtypeœ:œotherœ}",
        "selected": false,
        "source": "DataMapper-bc8pD",
        "sourceHandle": "{œdataTypeœ:œDataMapperœ,œidœ:œDataMapper-bc8pDœ,œnameœ:œdataœ,œoutput_typesœ:[œDataœ]}",
        "target": "ParserComponent-cPUXq",
        "targetHandle": "{œfieldNameœ:œinput_dataœ,œidœ:œParserComponent-cPUXqœ,œinputTypesœ:[œDataFrameœ,œDataœ],œtypeœ:œotherœ}"
      },
      {
        "animated": false,
        "className": "",
        "data": {
          "sourceHandle": {
            "dataType": "DataMapper",
            "id": "DataMapper-Jmwws",
            "name": "data",
            "output_types": [
              "Data"
            ]
          },
          "targetHandle": {
            "fieldName": "input_data",
            "id": "ParserComponent-B3sHD",
            "inputTypes": [
              "DataFrame",
              "Data"
            ],
            "type": "other"
          }
        },
        "id": "xy-edge__DataMapper-Jmwws{œdataTypeœ:œDataMapperœ,œidœ:œDataMapper-Jmwwsœ,œnameœ:œdataœ,œoutput_typesœ:[œDataœ]}-ParserComponent-B3sHD{œfieldNameœ:œinput_dataœ,œidœ:œParserComponent-B3sHDœ,œinputTypesœ:[œDataFrameœ,œDataœ],œtypeœ:œotherœ}",
        "selected": false,
        "source": "DataMapper-Jmwws",
        "sourceHandle": "{œdataTypeœ:œDataMapperœ,œidœ:œDataMapper-Jmwwsœ,œnameœ:œdataœ,œoutput_typesœ:[œDataœ]}",
        "target": "ParserComponent-B3sHD",
        "targetHandle": "{œfieldNameœ:œinput_dataœ,œidœ:œParserComponent-B3sHDœ,œinputTypesœ:[œDataFrameœ,œDataœ],œtypeœ:œotherœ}"
      },
      {
        "animated": false,
        "className": "",
        "data": {
          "sourceHandle": {
            "dataType": "CombineText",
            "id": "CombineText-mihFO",
            "name": "combined_text",
            "output_types": [
              "Message"
            ]
          },
          "targetHandle": {
            "fieldName": "input_message",
            "id": "Pass-SpImR",
            "inputTypes": [
              "Message"
            ],
            "type": "str"
          }
        },
        "id": "xy-edge__CombineText-mihFO{œdataTypeœ:œCombineTextœ,œidœ:œCombineText-mihFOœ,œnameœ:œcombined_textœ,œoutput_typesœ:[œMessageœ]}-Pass-SpImR{œfieldNameœ:œinput_messageœ,œidœ:œPass-SpImRœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
        "selected": false,
        "source": "CombineText-mihFO",
        "sourceHandle": "{œdataTypeœ:œCombineTextœ,œidœ:œCombineText-mihFOœ,œnameœ:œcombined_textœ,œoutput_typesœ:[œMessageœ]}",
        "target": "Pass-SpImR",
        "targetHandle": "{œfieldNameœ:œinput_messageœ,œidœ:œPass-SpImRœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}"
      },
      {
        "animated": false,
        "className": "",
        "data": {
          "sourceHandle": {
            "dataType": "Pass",
            "id": "Pass-SpImR",
            "name": "output_message",
            "output_types": [
              "Message"
            ]
          },
          "targetHandle": {
            "fieldName": "input_value",
            "id": "ChatOutput-PJLFw",
            "inputTypes": [
              "Data",
              "DataFrame",
              "Message"
            ],
            "type": "other"
          }
        },
        "id": "xy-edge__Pass-SpImR{œdataTypeœ:œPassœ,œidœ:œPass-SpImRœ,œnameœ:œoutput_messageœ,œoutput_typesœ:[œMessageœ]}-ChatOutput-PJLFw{œfieldNameœ:œinput_valueœ,œidœ:œChatOutput-PJLFwœ,œinputTypesœ:[œDataœ,œDataFrameœ,œMessageœ],œtypeœ:œotherœ}",
        "selected": false,
        "source": "Pass-SpImR",
        "sourceHandle": "{œdataTypeœ:œPassœ,œidœ:œPass-SpImRœ,œnameœ:œoutput_messageœ,œoutput_typesœ:[œMessageœ]}",
        "target": "ChatOutput-PJLFw",
        "targetHandle": "{œfieldNameœ:œinput_valueœ,œidœ:œChatOutput-PJLFwœ,œinputTypesœ:[œDataœ,œDataFrameœ,œMessageœ],œtypeœ:œotherœ}"
      },
      {
        "animated": false,
        "className": "",
        "data": {
          "sourceHandle": {
            "dataType": "ParserComponent",
            "id": "ParserComponent-B3sHD",
            "name": "parsed_text",
            "output_types": [
              "Message"
            ]
          },
          "targetHandle": {
            "fieldName": "ignored_message",
            "id": "Pass-SpImR",
            "inputTypes": [
              "Message"
            ],
            "type": "str"
          }
        },
        "id": "xy-edge__ParserComponent-B3sHD{œdataTypeœ:œParserComponentœ,œidœ:œParserComponent-B3sHDœ,œnameœ:œparsed_textœ,œoutput_typesœ:[œMessageœ]}-Pass-SpImR{œfieldNameœ:œignored_messageœ,œidœ:œPass-SpImRœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
        "selected": false,
        "source": "ParserComponent-B3sHD",
        "sourceHandle": "{œdataTypeœ:œParserComponentœ,œidœ:œParserComponent-B3sHDœ,œnameœ:œparsed_textœ,œoutput_typesœ:[œMessageœ]}",
        "target": "Pass-SpImR",
        "targetHandle": "{œfieldNameœ:œignored_messageœ,œidœ:œPass-SpImRœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}"
      },
      {
        "animated": false,
        "className": "",
        "data": {
          "sourceHandle": {
            "dataType": "ChatInput",
            "id": "ChatInput-Mlyxj",
            "name": "message",
            "output_types": [
              "Message"
            ]
          },
          "targetHandle": {
            "fieldName": "input_value",
            "id": "TextInput-k2gnd",
            "inputTypes": [
              "Message"
            ],
            "type": "str"
          }
        },
        "id": "xy-edge__ChatInput-Mlyxj{œdataTypeœ:œChatInputœ,œidœ:œChatInput-Mlyxjœ,œnameœ:œmessageœ,œoutput_typesœ:[œMessageœ]}-TextInput-k2gnd{œfieldNameœ:œinput_valueœ,œidœ:œTextInput-k2gndœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
        "selected": false,
        "source": "ChatInput-Mlyxj",
        "sourceHandle": "{œdataTypeœ:œChatInputœ,œidœ:œChatInput-Mlyxjœ,œnameœ:œmessageœ,œoutput_typesœ:[œMessageœ]}",
        "target": "TextInput-k2gnd",
        "targetHandle": "{œfieldNameœ:œinput_valueœ,œidœ:œTextInput-k2gndœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}"
      },
      {
        "animated": false,
        "className": "",
        "data": {
          "sourceHandle": {
            "dataType": "SlackCreateConversation",
            "id": "SlackCreateConversation-JKXln",
            "name": "api_build_data",
            "output_types": [
              "Data"
            ]
          },
          "targetHandle": {
            "fieldName": "input_data",
            "id": "DataMapper-bc8pD",
            "inputTypes": [
              "Data"
            ],
            "type": "other"
          }
        },
        "id": "xy-edge__SlackCreateConversation-JKXln{œdataTypeœ:œSlackCreateConversationœ,œidœ:œSlackCreateConversation-JKXlnœ,œnameœ:œapi_build_dataœ,œoutput_typesœ:[œDataœ]}-DataMapper-bc8pD{œfieldNameœ:œinput_dataœ,œidœ:œDataMapper-bc8pDœ,œinputTypesœ:[œDataœ],œtypeœ:œotherœ}",
        "selected": false,
        "source": "SlackCreateConversation-JKXln",
        "sourceHandle": "{œdataTypeœ:œSlackCreateConversationœ,œidœ:œSlackCreateConversation-JKXlnœ,œnameœ:œapi_build_dataœ,œoutput_typesœ:[œDataœ]}",
        "target": "DataMapper-bc8pD",
        "targetHandle": "{œfieldNameœ:œinput_dataœ,œidœ:œDataMapper-bc8pDœ,œinputTypesœ:[œDataœ],œtypeœ:œotherœ}"
      },
      {
        "animated": false,
        "className": "",
        "data": {
          "sourceHandle": {
            "dataType": "TextInput",
            "id": "TextInput-k2gnd",
            "name": "text",
            "output_types": [
              "Message"
            ]
          },
          "targetHandle": {
            "fieldName": "conversation_name",
            "id": "SlackCreateConversation-JKXln",
            "inputTypes": [
              "Message"
            ],
            "type": "str"
          }
        },
        "id": "xy-edge__TextInput-k2gnd{œdataTypeœ:œTextInputœ,œidœ:œTextInput-k2gndœ,œnameœ:œtextœ,œoutput_typesœ:[œMessageœ]}-SlackCreateConversation-JKXln{œfieldNameœ:œconversation_nameœ,œidœ:œSlackCreateConversation-JKXlnœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
        "selected": false,
        "source": "TextInput-k2gnd",
        "sourceHandle": "{œdataTypeœ:œTextInputœ,œidœ:œTextInput-k2gndœ,œnameœ:œtextœ,œoutput_typesœ:[œMessageœ]}",
        "target": "SlackCreateConversation-JKXln",
        "targetHandle": "{œfieldNameœ:œconversation_nameœ,œidœ:œSlackCreateConversation-JKXlnœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}"
      },
      {
        "animated": false,
        "className": "",
        "data": {
          "sourceHandle": {
            "dataType": "ParserComponent",
            "id": "ParserComponent-cPUXq",
            "name": "parsed_text",
            "output_types": [
              "Message"
            ]
          },
          "targetHandle": {
            "fieldName": "channel",
            "id": "SlackPostMessage-Us7aF",
            "inputTypes": [
              "Message"
            ],
            "type": "str"
          }
        },
        "id": "xy-edge__ParserComponent-cPUXq{œdataTypeœ:œParserComponentœ,œidœ:œParserComponent-cPUXqœ,œnameœ:œparsed_textœ,œoutput_typesœ:[œMessageœ]}-SlackPostMessage-Us7aF{œfieldNameœ:œchannelœ,œidœ:œSlackPostMessage-Us7aFœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
        "selected": false,
        "source": "ParserComponent-cPUXq",
        "sourceHandle": "{œdataTypeœ:œParserComponentœ,œidœ:œParserComponent-cPUXqœ,œnameœ:œparsed_textœ,œoutput_typesœ:[œMessageœ]}",
        "target": "SlackPostMessage-Us7aF",
        "targetHandle": "{œfieldNameœ:œchannelœ,œidœ:œSlackPostMessage-Us7aFœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}"
      },
      {
        "animated": false,
        "className": "",
        "data": {
          "sourceHandle": {
            "dataType": "CombineText",
            "id": "CombineText-mihFO",
            "name": "combined_text",
            "output_types": [
              "Message"
            ]
          },
          "targetHandle": {
            "fieldName": "text",
            "id": "SlackPostMessage-Us7aF",
            "inputTypes": [
              "Message"
            ],
            "type": "str"
          }
        },
        "id": "xy-edge__CombineText-mihFO{œdataTypeœ:œCombineTextœ,œidœ:œCombineText-mihFOœ,œnameœ:œcombined_textœ,œoutput_typesœ:[œMessageœ]}-SlackPostMessage-Us7aF{œfieldNameœ:œtextœ,œidœ:œSlackPostMessage-Us7aFœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
        "selected": false,
        "source": "CombineText-mihFO",
        "sourceHandle": "{œdataTypeœ:œCombineTextœ,œidœ:œCombineText-mihFOœ,œnameœ:œcombined_textœ,œoutput_typesœ:[œMessageœ]}",
        "target": "SlackPostMessage-Us7aF",
        "targetHandle": "{œfieldNameœ:œtextœ,œidœ:œSlackPostMessage-Us7aFœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}"
      },
      {
        "animated": false,
        "className": "",
        "data": {
          "sourceHandle": {
            "dataType": "SlackPostMessage",
            "id": "SlackPostMessage-Us7aF",
            "name": "api_build_data",
            "output_types": [
              "Data"
            ]
          },
          "targetHandle": {
            "fieldName": "input_data",
            "id": "DataMapper-Jmwws",
            "inputTypes": [
              "Data"
            ],
            "type": "other"
          }
        },
        "id": "xy-edge__SlackPostMessage-Us7aF{œdataTypeœ:œSlackPostMessageœ,œidœ:œSlackPostMessage-Us7aFœ,œnameœ:œapi_build_dataœ,œoutput_typesœ:[œDataœ]}-DataMapper-Jmwws{œfieldNameœ:œinput_dataœ,œidœ:œDataMapper-Jmwwsœ,œinputTypesœ:[œDataœ],œtypeœ:œotherœ}",
        "selected": false,
        "source": "SlackPostMessage-Us7aF",
        "sourceHandle": "{œdataTypeœ:œSlackPostMessageœ,œidœ:œSlackPostMessage-Us7aFœ,œnameœ:œapi_build_dataœ,œoutput_typesœ:[œDataœ]}",
        "target": "DataMapper-Jmwws",
        "targetHandle": "{œfieldNameœ:œinput_dataœ,œidœ:œDataMapper-Jmwwsœ,œinputTypesœ:[œDataœ],œtypeœ:œotherœ}"
      },
      {
        "animated": false,
        "className": "",
        "data": {
          "sourceHandle": {
            "dataType": "ParserComponent",
            "id": "ParserComponent-B3sHD",
            "name": "parsed_text",
            "output_types": [
              "Message"
            ]
          },
          "targetHandle": {
            "fieldName": "timestamp",
            "id": "SlackPinMessage-LT0lf",
            "inputTypes": [
              "Message"
            ],
            "type": "str"
          }
        },
        "id": "xy-edge__ParserComponent-B3sHD{œdataTypeœ:œParserComponentœ,œidœ:œParserComponent-B3sHDœ,œnameœ:œparsed_textœ,œoutput_typesœ:[œMessageœ]}-SlackPinMessage-LT0lf{œfieldNameœ:œtimestampœ,œidœ:œSlackPinMessage-LT0lfœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
        "selected": false,
        "source": "ParserComponent-B3sHD",
        "sourceHandle": "{œdataTypeœ:œParserComponentœ,œidœ:œParserComponent-B3sHDœ,œnameœ:œparsed_textœ,œoutput_typesœ:[œMessageœ]}",
        "target": "SlackPinMessage-LT0lf",
        "targetHandle": "{œfieldNameœ:œtimestampœ,œidœ:œSlackPinMessage-LT0lfœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}"
      },
      {
        "animated": false,
        "className": "",
        "data": {
          "sourceHandle": {
            "dataType": "ParserComponent",
            "id": "ParserComponent-cPUXq",
            "name": "parsed_text",
            "output_types": [
              "Message"
            ]
          },
          "targetHandle": {
            "fieldName": "channel",
            "id": "SlackPinMessage-LT0lf",
            "inputTypes": [
              "Message"
            ],
            "type": "str"
          }
        },
        "id": "xy-edge__ParserComponent-cPUXq{œdataTypeœ:œParserComponentœ,œidœ:œParserComponent-cPUXqœ,œnameœ:œparsed_textœ,œoutput_typesœ:[œMessageœ]}-SlackPinMessage-LT0lf{œfieldNameœ:œchannelœ,œidœ:œSlackPinMessage-LT0lfœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
        "selected": false,
        "source": "ParserComponent-cPUXq",
        "sourceHandle": "{œdataTypeœ:œParserComponentœ,œidœ:œParserComponent-cPUXqœ,œnameœ:œparsed_textœ,œoutput_typesœ:[œMessageœ]}",
        "target": "SlackPinMessage-LT0lf",
        "targetHandle": "{œfieldNameœ:œchannelœ,œidœ:œSlackPinMessage-LT0lfœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}"
      }
    ],
    "nodes": [
      {
        "data": {
          "id": "OnlyofficeDocspaceCreateRoom-Uf3Xb",
          "node": {
            "base_classes": [
              "Data",
              "Tool"
            ],
            "beta": false,
            "conditional_paths": [],
            "custom_fields": {},
            "description": "Create a room in ONLYOFFICE DocSpace.",
            "display_name": "Create Room",
            "documentation": "",
            "edited": false,
            "field_order": [
              "auth_text",
              "room_type",
              "title"
            ],
            "frozen": false,
            "icon": "onlyoffice",
            "legacy": false,
            "lf_version": "1.3.4",
            "metadata": {},
            "minimized": false,
            "output_types": [],
            "outputs": [
              {
                "allows_loop": false,
                "cache": true,
                "display_name": "Data",
                "hidden": false,
                "method": "build_data",
                "name": "api_build_data",
                "selected": "Data",
                "tool_mode": true,
                "types": [
                  "Data"
                ],
                "value": "__UNDEFINED__"
              },
              {
                "allows_loop": false,
                "cache": true,
                "display_name": "Tool",
                "hidden": true,
                "method": "build_tool",
                "name": "api_build_tool",
                "selected": "Tool",
                "tool_mode": true,
                "types": [
                  "Tool"
                ],
                "value": "__UNDEFINED__"
              }
            ],
            "pinned": false,
            "template": {
              "_type": "Component",
              "auth_text": {
                "_input_type": "AuthTextInput",
                "advanced": false,
                "display_name": "Text from Basic Authentication",
                "dynamic": false,
                "info": "Text output from the Basic Authentication component.",
                "input_types": [
                  "Message"
                ],
                "load_from_db": false,
                "name": "auth_text",
                "password": true,
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "type": "str",
                "value": ""
              },
              "code": {
                "advanced": true,
                "dynamic": true,
                "fileTypes": [],
                "file_path": "",
                "info": "",
                "list": false,
                "load_from_db": false,
                "multiline": true,
                "name": "code",
                "password": false,
                "placeholder": "",
                "required": true,
                "show": true,
                "title_case": false,
                "type": "code",
                "value": "from typing import Any\n\nfrom langchain.tools import StructuredTool\nfrom pydantic import BaseModel, Field\n\nfrom langflow.base.onlyoffice.docspace import (\n    AuthTextInput,\n    Component,\n    CreateRoomOptions,\n    DataOutput,\n    ErrorResponse,\n    RoomType,\n    ToolOutput,\n)\nfrom langflow.field_typing import Tool\nfrom langflow.inputs import MessageTextInput\nfrom langflow.schema import Data\n\n\nclass OnlyofficeDocspaceCreateRoom(Component):\n    display_name = \"Create Room\"\n    description = \"Create a room in ONLYOFFICE DocSpace.\"\n    name = \"OnlyofficeDocspaceCreateRoom\"\n\n\n    inputs = [\n        AuthTextInput(),\n        MessageTextInput(\n            name=\"room_type\",\n            display_name=\"Room Type\",\n            info=\"The type of the room. The available types are: FillingFormsRoom (1), EditingRoom (2), CustomRoom (5), PublicRoom (6), VirtualDataRoom (8).\",\n            advanced=True,\n            value=\"PublicRoom\",\n        ),\n        MessageTextInput(\n            name=\"title\",\n            display_name=\"Title\",\n            info=\"The title of the room.\",\n        ),\n    ]\n\n\n    outputs = [\n        DataOutput(),\n        ToolOutput(),\n    ]\n\n\n    class Schema(BaseModel):\n        room_type: RoomType = Field(\"PublicRoom\", description=\"The type of the room.\")\n        title: str = Field(..., description=\"The title of the room.\")\n\n\n    def _create_schema(self) -> Schema:\n        room_type = self.room_type\n        try:\n            room_type = int(self.room_type)\n        except:  # noqa: E722\n            room_type = self.room_type\n\n        return self.Schema(\n            room_type=room_type,\n            title=self.title,\n        )\n\n\n    async def build_data(self) -> Data:\n        schema = self._create_schema()\n        data = await self._create_room(schema)\n        return Data(data=data)\n\n\n    def build_tool(self) -> Tool:\n        return StructuredTool.from_function(\n            name=\"onlyoffice_docspace_create_room\",\n            description=\"Create a room in ONLYOFFICE DocSpace.\",\n            coroutine=self._tool_func,\n            args_schema=self.Schema,\n        )\n\n\n    async def _tool_func(self, **kwargs) -> Any:\n        schema = self.Schema(**kwargs)\n        return await self._create_room(schema)\n\n\n    async def _create_room(self, schema: Schema) -> Any:\n        client = await self._get_client()\n\n        options = CreateRoomOptions(\n            roomType=schema.room_type,\n            title=schema.title,\n        )\n\n        room, response = client.files.create_room(options)\n        if isinstance(response, ErrorResponse):\n            raise response.exception\n\n        return room\n"
              },
              "room_type": {
                "_input_type": "MessageTextInput",
                "advanced": true,
                "display_name": "Room Type",
                "dynamic": false,
                "info": "The type of the room. The available types are: FillingFormsRoom (1), EditingRoom (2), CustomRoom (5), PublicRoom (6), VirtualDataRoom (8).",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "room_type",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": "PublicRoom"
              },
              "title": {
                "_input_type": "MessageTextInput",
                "advanced": false,
                "display_name": "Title",
                "dynamic": false,
                "info": "The title of the room.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "title",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              }
            },
            "tool_mode": false
          },
          "showNode": true,
          "type": "OnlyofficeDocspaceCreateRoom"
        },
        "dragging": false,
        "id": "OnlyofficeDocspaceCreateRoom-Uf3Xb",
        "measured": {
          "height": 312,
          "width": 320
        },
        "position": {
          "x": 454.8344183576812,
          "y": -25.14863070308357
        },
        "selected": false,
        "type": "genericNode"
      },
      {
        "data": {
          "id": "OnlyofficeDocspaceBasicAuthentication-xkoe6",
          "node": {
            "base_classes": [
              "Data",
              "Message",
              "Tool"
            ],
            "beta": false,
            "conditional_paths": [],
            "custom_fields": {},
            "description": "Basic authentication for ONLYOFFICE DocSpace.",
            "display_name": "Basic Authentication",
            "documentation": "",
            "edited": false,
            "field_order": [
              "base_url",
              "username",
              "password"
            ],
            "frozen": false,
            "icon": "onlyoffice",
            "legacy": false,
            "lf_version": "1.3.4",
            "metadata": {},
            "minimized": false,
            "output_types": [],
            "outputs": [
              {
                "allows_loop": false,
                "cache": true,
                "display_name": "Data",
                "hidden": true,
                "method": "build_data",
                "name": "api_build_data",
                "selected": "Data",
                "tool_mode": true,
                "types": [
                  "Data"
                ],
                "value": "__UNDEFINED__"
              },
              {
                "allows_loop": false,
                "cache": true,
                "display_name": "Message",
                "hidden": true,
                "method": "build_message",
                "name": "api_build_message",
                "selected": "Message",
                "tool_mode": true,
                "types": [
                  "Message"
                ],
                "value": "__UNDEFINED__"
              },
              {
                "allows_loop": false,
                "cache": true,
                "display_name": "Text",
                "hidden": false,
                "method": "build_text",
                "name": "api_build_text",
                "selected": "Message",
                "tool_mode": true,
                "types": [
                  "Message"
                ],
                "value": "__UNDEFINED__"
              },
              {
                "allows_loop": false,
                "cache": true,
                "display_name": "Tool",
                "hidden": true,
                "method": "build_tool",
                "name": "api_build_tool",
                "selected": "Tool",
                "tool_mode": true,
                "types": [
                  "Tool"
                ],
                "value": "__UNDEFINED__"
              }
            ],
            "pinned": false,
            "template": {
              "_type": "Component",
              "base_url": {
                "_input_type": "MessageTextInput",
                "advanced": false,
                "display_name": "ONLYOFFICE DocSpace Base URL",
                "dynamic": false,
                "info": "The base URL of the ONLYOFFICE DocSpace instance.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "base_url",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "code": {
                "advanced": true,
                "dynamic": true,
                "fileTypes": [],
                "file_path": "",
                "info": "",
                "list": false,
                "load_from_db": false,
                "multiline": true,
                "name": "code",
                "password": false,
                "placeholder": "",
                "required": true,
                "show": true,
                "title_case": false,
                "type": "code",
                "value": "import hashlib\nimport json\n\nfrom langchain.tools import StructuredTool\nfrom pydantic import BaseModel, Field\n\nfrom langflow.base.onlyoffice.docspace import (\n    AuthOptions,\n    Client,\n    DataOutput,\n    SuccessResponse,\n    ToolOutput,\n)\nfrom langflow.custom.custom_component.component_with_cache import ComponentWithCache\nfrom langflow.field_typing import Tool\nfrom langflow.inputs import MessageTextInput, SecretStrInput\nfrom langflow.schema import Data\nfrom langflow.schema.message import Message\nfrom langflow.services.cache.utils import CacheMiss\nfrom langflow.template import Output\n\nSHARED_COMPONENT_CACHE_TOKEN_KEY = \"onlyoffice_docspace_basic_authorization_token\"  # noqa: S105\n\n\nclass OnlyofficeDocspaceBasicAuthentication(ComponentWithCache):\n    display_name = \"Basic Authentication\"\n    description = \"Basic authentication for ONLYOFFICE DocSpace.\"\n    icon = \"onlyoffice\"\n    name = \"OnlyofficeDocspaceBasicAuthentication\"\n\n\n    inputs = [\n        MessageTextInput(\n            name=\"base_url\",\n            display_name=\"ONLYOFFICE DocSpace Base URL\",\n            info=\"The base URL of the ONLYOFFICE DocSpace instance.\",\n        ),\n        MessageTextInput(\n            name=\"username\",\n            display_name=\"ONLYOFFICE DocSpace Username\",\n            info=\"The username to access the ONLYOFFICE DocSpace API.\",\n        ),\n        SecretStrInput(\n            name=\"password\",\n            display_name=\"ONLYOFFICE DocSpace Password\",\n            info=\"The password to access the ONLYOFFICE DocSpace API.\",\n            value=\"ONLYOFFICE_DOCSPACE_PASSWORD\",\n        ),\n    ]\n\n\n    outputs = [\n        DataOutput(),\n        Output(\n            display_name=\"Message\",\n            name=\"api_build_message\",\n            method=\"build_message\",\n            hidden=True,\n        ),\n        Output(\n            display_name=\"Text\",\n            name=\"api_build_text\",\n            method=\"build_text\",\n            hidden=True,\n        ),\n        ToolOutput(),\n    ]\n\n\n    class Schema(BaseModel):\n        base_url: str = Field(..., description=\"The base URL of the ONLYOFFICE DocSpace instance.\")\n        username: str = Field(..., description=\"The username to access the ONLYOFFICE DocSpace API.\")\n        password: str = Field(..., description=\"The password to access the ONLYOFFICE DocSpace API.\")\n\n\n    def _create_schema(self) -> Schema:\n        return self.Schema(\n            base_url=self.base_url,\n            username=self.username,\n            password=self.password,\n        )\n\n\n    def build_data(self) -> Data:\n        schema = self._create_schema()\n        data = self._do_basic(schema)\n        return Data(data=data)\n\n\n    def build_message(self) -> Message:\n        schema = self._create_schema()\n        data = self._do_basic(schema)\n        text = f\"Base URL: {data[\"base_url\"]}\\n\"\n        text += f\"Token: {data[\"token\"]}\"\n        return Message(text=text)\n\n\n    def build_text(self) -> Message:\n        schema = self._create_schema()\n        data = self._do_basic(schema)\n        text = json.dumps(data, indent=4)\n        return Message(text=text)\n\n\n    def build_tool(self) -> Tool:\n        return StructuredTool.from_function(\n            name=\"onlyoffice_docspace_basic_authorization\",\n            description=\"Basic authentication for ONLYOFFICE DocSpace.\",\n            func=self._tool_func,\n            args_schema=self.Schema,\n        )\n\n\n    def _tool_func(self, **kwargs) -> dict:\n        schema = self.Schema(**kwargs)\n        return self._do_basic(schema)\n\n\n    def _do_basic(self, schema: Schema) -> dict:\n        token = self._get_token(schema)\n        return {\n            \"base_url\": schema.base_url,\n            \"token\": token,\n        }\n\n\n    def _get_token(self, schema: Schema) -> str:\n        key = self._create_key(schema)\n        return self._ensure_token(schema, key)\n\n\n    def _create_key(self, schema: Schema) -> str:\n        digest = self._create_digest(schema)\n        return f\"{SHARED_COMPONENT_CACHE_TOKEN_KEY}_{digest}\"\n\n\n    def _create_digest(self, schema: Schema) -> str:\n        schema = self.Schema(\n            base_url=schema.base_url,\n            username=schema.username,\n            password=\"REDACTED\",  # noqa: S106\n        )\n        json = schema.model_dump_json()\n        sha = hashlib.sha1(json.encode())  # noqa: S324\n        return sha.hexdigest()\n\n\n    def _ensure_token(self, schema: Schema, key: str) -> str:\n        client = Client()\n        client.base_url = schema.base_url\n\n        token = self._retrieve_token(key)\n\n        if token:\n            _, response = client.with_auth_token(token).auth.check()\n            if not isinstance(response, SuccessResponse):\n                token = \"\"\n\n        if not token:\n            options = AuthOptions(\n                UserName=schema.username,\n                Password=schema.password,\n            )\n\n            auth, response = client.auth.auth(options)\n            if not isinstance(response, SuccessResponse):\n                msg = \"Failed to authenticate\"\n                raise ValueError(msg)\n\n            if not auth.token:\n                msg = \"Token is empty\"\n                raise ValueError(msg)\n\n            token = auth.token\n\n        self._cache_token(key, token)\n\n        return token\n\n\n    def _retrieve_token(self, key: str) -> str:\n        token = self._shared_component_cache.get(key)\n        if isinstance(token, CacheMiss):\n            return \"\"\n        return token\n\n\n    def _cache_token(self, key: str, token: str):\n        self._shared_component_cache.set(key, token)\n"
              },
              "password": {
                "_input_type": "SecretStrInput",
                "advanced": false,
                "display_name": "ONLYOFFICE DocSpace Password",
                "dynamic": false,
                "info": "The password to access the ONLYOFFICE DocSpace API.",
                "input_types": [
                  "Message"
                ],
                "load_from_db": false,
                "name": "password",
                "password": true,
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "type": "str",
                "value": ""
              },
              "username": {
                "_input_type": "MessageTextInput",
                "advanced": false,
                "display_name": "ONLYOFFICE DocSpace Username",
                "dynamic": false,
                "info": "The username to access the ONLYOFFICE DocSpace API.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "username",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              }
            },
            "tool_mode": false
          },
          "showNode": true,
          "type": "OnlyofficeDocspaceBasicAuthentication"
        },
        "dragging": false,
        "id": "OnlyofficeDocspaceBasicAuthentication-xkoe6",
        "measured": {
          "height": 415,
          "width": 320
        },
        "position": {
          "x": 90,
          "y": -58.375
        },
        "selected": false,
        "type": "genericNode"
      },
      {
        "data": {
          "id": "ChatInput-Mlyxj",
          "node": {
            "base_classes": [
              "Message"
            ],
            "beta": false,
            "conditional_paths": [],
            "custom_fields": {},
            "description": "Get chat inputs from the Playground.",
            "display_name": "Chat Input",
            "documentation": "",
            "edited": false,
            "field_order": [
              "input_value",
              "should_store_message",
              "sender",
              "sender_name",
              "session_id",
              "files",
              "background_color",
              "chat_icon",
              "text_color"
            ],
            "frozen": false,
            "icon": "MessagesSquare",
            "legacy": false,
            "lf_version": "1.3.4",
            "metadata": {},
            "minimized": true,
            "output_types": [],
            "outputs": [
              {
                "allows_loop": false,
                "cache": true,
                "display_name": "Message",
                "method": "message_response",
                "name": "message",
                "selected": "Message",
                "tool_mode": true,
                "types": [
                  "Message"
                ],
                "value": "__UNDEFINED__"
              }
            ],
            "pinned": false,
            "template": {
              "_type": "Component",
              "background_color": {
                "_input_type": "MessageTextInput",
                "advanced": true,
                "display_name": "Background Color",
                "dynamic": false,
                "info": "The background color of the icon.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "background_color",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "chat_icon": {
                "_input_type": "MessageTextInput",
                "advanced": true,
                "display_name": "Icon",
                "dynamic": false,
                "info": "The icon of the message.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "chat_icon",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "code": {
                "advanced": true,
                "dynamic": true,
                "fileTypes": [],
                "file_path": "",
                "info": "",
                "list": false,
                "load_from_db": false,
                "multiline": true,
                "name": "code",
                "password": false,
                "placeholder": "",
                "required": true,
                "show": true,
                "title_case": false,
                "type": "code",
                "value": "from langflow.base.data.utils import IMG_FILE_TYPES, TEXT_FILE_TYPES\nfrom langflow.base.io.chat import ChatComponent\nfrom langflow.inputs import BoolInput\nfrom langflow.io import (\n    DropdownInput,\n    FileInput,\n    MessageTextInput,\n    MultilineInput,\n    Output,\n)\nfrom langflow.schema.message import Message\nfrom langflow.utils.constants import (\n    MESSAGE_SENDER_AI,\n    MESSAGE_SENDER_NAME_USER,\n    MESSAGE_SENDER_USER,\n)\n\n\nclass ChatInput(ChatComponent):\n    display_name = \"Chat Input\"\n    description = \"Get chat inputs from the Playground.\"\n    icon = \"MessagesSquare\"\n    name = \"ChatInput\"\n    minimized = True\n\n    inputs = [\n        MultilineInput(\n            name=\"input_value\",\n            display_name=\"Text\",\n            value=\"\",\n            info=\"Message to be passed as input.\",\n            input_types=[],\n        ),\n        BoolInput(\n            name=\"should_store_message\",\n            display_name=\"Store Messages\",\n            info=\"Store the message in the history.\",\n            value=True,\n            advanced=True,\n        ),\n        DropdownInput(\n            name=\"sender\",\n            display_name=\"Sender Type\",\n            options=[MESSAGE_SENDER_AI, MESSAGE_SENDER_USER],\n            value=MESSAGE_SENDER_USER,\n            info=\"Type of sender.\",\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"sender_name\",\n            display_name=\"Sender Name\",\n            info=\"Name of the sender.\",\n            value=MESSAGE_SENDER_NAME_USER,\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"session_id\",\n            display_name=\"Session ID\",\n            info=\"The session ID of the chat. If empty, the current session ID parameter will be used.\",\n            advanced=True,\n        ),\n        FileInput(\n            name=\"files\",\n            display_name=\"Files\",\n            file_types=TEXT_FILE_TYPES + IMG_FILE_TYPES,\n            info=\"Files to be sent with the message.\",\n            advanced=True,\n            is_list=True,\n            temp_file=True,\n        ),\n        MessageTextInput(\n            name=\"background_color\",\n            display_name=\"Background Color\",\n            info=\"The background color of the icon.\",\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"chat_icon\",\n            display_name=\"Icon\",\n            info=\"The icon of the message.\",\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"text_color\",\n            display_name=\"Text Color\",\n            info=\"The text color of the name\",\n            advanced=True,\n        ),\n    ]\n    outputs = [\n        Output(display_name=\"Message\", name=\"message\", method=\"message_response\"),\n    ]\n\n    async def message_response(self) -> Message:\n        background_color = self.background_color\n        text_color = self.text_color\n        icon = self.chat_icon\n\n        message = await Message.create(\n            text=self.input_value,\n            sender=self.sender,\n            sender_name=self.sender_name,\n            session_id=self.session_id,\n            files=self.files,\n            properties={\n                \"background_color\": background_color,\n                \"text_color\": text_color,\n                \"icon\": icon,\n            },\n        )\n        if self.session_id and isinstance(message, Message) and self.should_store_message:\n            stored_message = await self.send_message(\n                message,\n            )\n            self.message.value = stored_message\n            message = stored_message\n\n        self.status = message\n        return message\n"
              },
              "files": {
                "_input_type": "FileInput",
                "advanced": true,
                "display_name": "Files",
                "dynamic": false,
                "fileTypes": [
                  "txt",
                  "md",
                  "mdx",
                  "csv",
                  "json",
                  "yaml",
                  "yml",
                  "xml",
                  "html",
                  "htm",
                  "pdf",
                  "docx",
                  "py",
                  "sh",
                  "sql",
                  "js",
                  "ts",
                  "tsx",
                  "jpg",
                  "jpeg",
                  "png",
                  "bmp",
                  "image"
                ],
                "file_path": "",
                "info": "Files to be sent with the message.",
                "list": true,
                "list_add_label": "Add More",
                "name": "files",
                "placeholder": "",
                "required": false,
                "show": true,
                "temp_file": true,
                "title_case": false,
                "trace_as_metadata": true,
                "type": "file",
                "value": ""
              },
              "input_value": {
                "_input_type": "MultilineInput",
                "advanced": false,
                "copy_field": false,
                "display_name": "Text",
                "dynamic": false,
                "info": "Message to be passed as input.",
                "input_types": [],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "multiline": true,
                "name": "input_value",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "sender": {
                "_input_type": "DropdownInput",
                "advanced": true,
                "combobox": false,
                "dialog_inputs": {},
                "display_name": "Sender Type",
                "dynamic": false,
                "info": "Type of sender.",
                "name": "sender",
                "options": [
                  "Machine",
                  "User"
                ],
                "options_metadata": [],
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "str",
                "value": "User"
              },
              "sender_name": {
                "_input_type": "MessageTextInput",
                "advanced": true,
                "display_name": "Sender Name",
                "dynamic": false,
                "info": "Name of the sender.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "sender_name",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": "User"
              },
              "session_id": {
                "_input_type": "MessageTextInput",
                "advanced": true,
                "display_name": "Session ID",
                "dynamic": false,
                "info": "The session ID of the chat. If empty, the current session ID parameter will be used.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "session_id",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "should_store_message": {
                "_input_type": "BoolInput",
                "advanced": true,
                "display_name": "Store Messages",
                "dynamic": false,
                "info": "Store the message in the history.",
                "list": false,
                "list_add_label": "Add More",
                "name": "should_store_message",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "bool",
                "value": true
              },
              "text_color": {
                "_input_type": "MessageTextInput",
                "advanced": true,
                "display_name": "Text Color",
                "dynamic": false,
                "info": "The text color of the name",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "text_color",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              }
            },
            "tool_mode": false
          },
          "showNode": false,
          "type": "ChatInput"
        },
        "dragging": false,
        "id": "ChatInput-Mlyxj",
        "measured": {
          "height": 66,
          "width": 192
        },
        "position": {
          "x": -170.03165442245245,
          "y": 477.73614808892876
        },
        "selected": false,
        "type": "genericNode"
      },
      {
        "data": {
          "id": "CombineText-sccCA",
          "node": {
            "base_classes": [
              "Message"
            ],
            "beta": false,
            "conditional_paths": [],
            "custom_fields": {},
            "description": "Concatenate two text sources into a single text chunk using a specified delimiter.",
            "display_name": "Combine Text",
            "documentation": "",
            "edited": false,
            "field_order": [
              "text1",
              "text2",
              "delimiter"
            ],
            "frozen": false,
            "icon": "merge",
            "legacy": false,
            "lf_version": "1.3.4",
            "metadata": {},
            "minimized": false,
            "output_types": [],
            "outputs": [
              {
                "allows_loop": false,
                "cache": true,
                "display_name": "Combined Text",
                "hidden": false,
                "method": "combine_texts",
                "name": "combined_text",
                "selected": "Message",
                "tool_mode": true,
                "types": [
                  "Message"
                ],
                "value": "__UNDEFINED__"
              }
            ],
            "pinned": false,
            "template": {
              "_type": "Component",
              "code": {
                "advanced": true,
                "dynamic": true,
                "fileTypes": [],
                "file_path": "",
                "info": "",
                "list": false,
                "load_from_db": false,
                "multiline": true,
                "name": "code",
                "password": false,
                "placeholder": "",
                "required": true,
                "show": true,
                "title_case": false,
                "type": "code",
                "value": "from langflow.custom import Component\nfrom langflow.io import MessageTextInput, Output\nfrom langflow.schema.message import Message\n\n\nclass CombineTextComponent(Component):\n    display_name = \"Combine Text\"\n    description = \"Concatenate two text sources into a single text chunk using a specified delimiter.\"\n    icon = \"merge\"\n    name = \"CombineText\"\n\n    inputs = [\n        MessageTextInput(\n            name=\"text1\",\n            display_name=\"First Text\",\n            info=\"The first text input to concatenate.\",\n        ),\n        MessageTextInput(\n            name=\"text2\",\n            display_name=\"Second Text\",\n            info=\"The second text input to concatenate.\",\n        ),\n        MessageTextInput(\n            name=\"delimiter\",\n            display_name=\"Delimiter\",\n            info=\"A string used to separate the two text inputs. Defaults to a whitespace.\",\n            value=\" \",\n        ),\n    ]\n\n    outputs = [\n        Output(display_name=\"Combined Text\", name=\"combined_text\", method=\"combine_texts\"),\n    ]\n\n    def combine_texts(self) -> Message:\n        combined = self.delimiter.join([self.text1, self.text2])\n        self.status = combined\n        return Message(text=combined)\n"
              },
              "delimiter": {
                "_input_type": "MessageTextInput",
                "advanced": false,
                "display_name": "Delimiter",
                "dynamic": false,
                "info": "A string used to separate the two text inputs. Defaults to a whitespace.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "delimiter",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": "/filter?folder="
              },
              "text1": {
                "_input_type": "MessageTextInput",
                "advanced": false,
                "display_name": "First Text",
                "dynamic": false,
                "info": "The first text input to concatenate.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "text1",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "text2": {
                "_input_type": "MessageTextInput",
                "advanced": false,
                "display_name": "Second Text",
                "dynamic": false,
                "info": "The second text input to concatenate.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "text2",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              }
            },
            "tool_mode": false
          },
          "showNode": true,
          "type": "CombineText"
        },
        "dragging": false,
        "id": "CombineText-sccCA",
        "measured": {
          "height": 415,
          "width": 320
        },
        "position": {
          "x": 1508.5154333169853,
          "y": -49.43180206280228
        },
        "selected": false,
        "type": "genericNode"
      },
      {
        "data": {
          "id": "TextInput-CgzMc",
          "node": {
            "base_classes": [
              "Message"
            ],
            "beta": false,
            "conditional_paths": [],
            "custom_fields": {},
            "description": "",
            "display_name": "DocSpace base url",
            "documentation": "",
            "edited": false,
            "field_order": [
              "input_value"
            ],
            "frozen": false,
            "icon": "type",
            "legacy": false,
            "lf_version": "1.3.4",
            "metadata": {},
            "minimized": false,
            "output_types": [],
            "outputs": [
              {
                "allows_loop": false,
                "cache": true,
                "display_name": "Message",
                "hidden": false,
                "method": "text_response",
                "name": "text",
                "selected": "Message",
                "tool_mode": true,
                "types": [
                  "Message"
                ],
                "value": "__UNDEFINED__"
              }
            ],
            "pinned": false,
            "template": {
              "_type": "Component",
              "code": {
                "advanced": true,
                "dynamic": true,
                "fileTypes": [],
                "file_path": "",
                "info": "",
                "list": false,
                "load_from_db": false,
                "multiline": true,
                "name": "code",
                "password": false,
                "placeholder": "",
                "required": true,
                "show": true,
                "title_case": false,
                "type": "code",
                "value": "from langflow.base.io.text import TextComponent\nfrom langflow.io import MultilineInput, Output\nfrom langflow.schema.message import Message\n\n\nclass TextInputComponent(TextComponent):\n    display_name = \"Text Input\"\n    description = \"Get text inputs from the Playground.\"\n    icon = \"type\"\n    name = \"TextInput\"\n\n    inputs = [\n        MultilineInput(\n            name=\"input_value\",\n            display_name=\"Text\",\n            info=\"Text to be passed as input.\",\n        ),\n    ]\n    outputs = [\n        Output(display_name=\"Message\", name=\"text\", method=\"text_response\"),\n    ]\n\n    def text_response(self) -> Message:\n        return Message(\n            text=self.input_value,\n        )\n"
              },
              "input_value": {
                "_input_type": "MultilineInput",
                "advanced": false,
                "copy_field": false,
                "display_name": "Text",
                "dynamic": false,
                "info": "Text to be passed as input.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "multiline": true,
                "name": "input_value",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              }
            },
            "tool_mode": false
          },
          "showNode": true,
          "type": "TextInput"
        },
        "dragging": false,
        "id": "TextInput-CgzMc",
        "measured": {
          "height": 197,
          "width": 320
        },
        "position": {
          "x": -255.8821963299186,
          "y": -243.8306307694092
        },
        "selected": false,
        "type": "genericNode"
      },
      {
        "data": {
          "id": "CombineText-Uk8dL",
          "node": {
            "base_classes": [
              "Message"
            ],
            "beta": false,
            "conditional_paths": [],
            "custom_fields": {},
            "description": "Concatenate two text sources into a single text chunk using a specified delimiter.",
            "display_name": "Combine Text",
            "documentation": "",
            "edited": false,
            "field_order": [
              "text1",
              "text2",
              "delimiter"
            ],
            "frozen": false,
            "icon": "merge",
            "legacy": false,
            "lf_version": "1.3.4",
            "metadata": {},
            "minimized": false,
            "output_types": [],
            "outputs": [
              {
                "allows_loop": false,
                "cache": true,
                "display_name": "Combined Text",
                "hidden": false,
                "method": "combine_texts",
                "name": "combined_text",
                "selected": "Message",
                "tool_mode": true,
                "types": [
                  "Message"
                ],
                "value": "__UNDEFINED__"
              }
            ],
            "pinned": false,
            "template": {
              "_type": "Component",
              "code": {
                "advanced": true,
                "dynamic": true,
                "fileTypes": [],
                "file_path": "",
                "info": "",
                "list": false,
                "load_from_db": false,
                "multiline": true,
                "name": "code",
                "password": false,
                "placeholder": "",
                "required": true,
                "show": true,
                "title_case": false,
                "type": "code",
                "value": "from langflow.custom import Component\nfrom langflow.io import MessageTextInput, Output\nfrom langflow.schema.message import Message\n\n\nclass CombineTextComponent(Component):\n    display_name = \"Combine Text\"\n    description = \"Concatenate two text sources into a single text chunk using a specified delimiter.\"\n    icon = \"merge\"\n    name = \"CombineText\"\n\n    inputs = [\n        MessageTextInput(\n            name=\"text1\",\n            display_name=\"First Text\",\n            info=\"The first text input to concatenate.\",\n        ),\n        MessageTextInput(\n            name=\"text2\",\n            display_name=\"Second Text\",\n            info=\"The second text input to concatenate.\",\n        ),\n        MessageTextInput(\n            name=\"delimiter\",\n            display_name=\"Delimiter\",\n            info=\"A string used to separate the two text inputs. Defaults to a whitespace.\",\n            value=\" \",\n        ),\n    ]\n\n    outputs = [\n        Output(display_name=\"Combined Text\", name=\"combined_text\", method=\"combine_texts\"),\n    ]\n\n    def combine_texts(self) -> Message:\n        combined = self.delimiter.join([self.text1, self.text2])\n        self.status = combined\n        return Message(text=combined)\n"
              },
              "delimiter": {
                "_input_type": "MessageTextInput",
                "advanced": false,
                "display_name": "Delimiter",
                "dynamic": false,
                "info": "A string used to separate the two text inputs. Defaults to a whitespace.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "delimiter",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": "rooms/shared/"
              },
              "text1": {
                "_input_type": "MessageTextInput",
                "advanced": false,
                "display_name": "First Text",
                "dynamic": false,
                "info": "The first text input to concatenate.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "text1",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "text2": {
                "_input_type": "MessageTextInput",
                "advanced": false,
                "display_name": "Second Text",
                "dynamic": false,
                "info": "The second text input to concatenate.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "text2",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              }
            },
            "tool_mode": false
          },
          "showNode": true,
          "type": "CombineText"
        },
        "dragging": false,
        "id": "CombineText-Uk8dL",
        "measured": {
          "height": 415,
          "width": 320
        },
        "position": {
          "x": 1162.686095855103,
          "y": -235.29741142737208
        },
        "selected": false,
        "type": "genericNode"
      },
      {
        "data": {
          "id": "CombineText-mihFO",
          "node": {
            "base_classes": [
              "Message"
            ],
            "beta": false,
            "conditional_paths": [],
            "custom_fields": {},
            "description": "Concatenate two text sources into a single text chunk using a specified delimiter.",
            "display_name": "Combine Text",
            "documentation": "",
            "edited": false,
            "field_order": [
              "text1",
              "text2",
              "delimiter"
            ],
            "frozen": false,
            "icon": "merge",
            "legacy": false,
            "lf_version": "1.3.4",
            "metadata": {},
            "minimized": false,
            "output_types": [],
            "outputs": [
              {
                "allows_loop": false,
                "cache": true,
                "display_name": "Combined Text",
                "hidden": false,
                "method": "combine_texts",
                "name": "combined_text",
                "selected": "Message",
                "tool_mode": true,
                "types": [
                  "Message"
                ],
                "value": "__UNDEFINED__"
              }
            ],
            "pinned": false,
            "template": {
              "_type": "Component",
              "code": {
                "advanced": true,
                "dynamic": true,
                "fileTypes": [],
                "file_path": "",
                "info": "",
                "list": false,
                "load_from_db": false,
                "multiline": true,
                "name": "code",
                "password": false,
                "placeholder": "",
                "required": true,
                "show": true,
                "title_case": false,
                "type": "code",
                "value": "from langflow.custom import Component\nfrom langflow.io import MessageTextInput, Output\nfrom langflow.schema.message import Message\n\n\nclass CombineTextComponent(Component):\n    display_name = \"Combine Text\"\n    description = \"Concatenate two text sources into a single text chunk using a specified delimiter.\"\n    icon = \"merge\"\n    name = \"CombineText\"\n\n    inputs = [\n        MessageTextInput(\n            name=\"text1\",\n            display_name=\"First Text\",\n            info=\"The first text input to concatenate.\",\n        ),\n        MessageTextInput(\n            name=\"text2\",\n            display_name=\"Second Text\",\n            info=\"The second text input to concatenate.\",\n        ),\n        MessageTextInput(\n            name=\"delimiter\",\n            display_name=\"Delimiter\",\n            info=\"A string used to separate the two text inputs. Defaults to a whitespace.\",\n            value=\" \",\n        ),\n    ]\n\n    outputs = [\n        Output(display_name=\"Combined Text\", name=\"combined_text\", method=\"combine_texts\"),\n    ]\n\n    def combine_texts(self) -> Message:\n        combined = self.delimiter.join([self.text1, self.text2])\n        self.status = combined\n        return Message(text=combined)\n"
              },
              "delimiter": {
                "_input_type": "MessageTextInput",
                "advanced": false,
                "display_name": "Delimiter",
                "dynamic": false,
                "info": "A string used to separate the two text inputs. Defaults to a whitespace.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "delimiter",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": " DocSpace room URL:\\n"
              },
              "text1": {
                "_input_type": "MessageTextInput",
                "advanced": false,
                "display_name": "First Text",
                "dynamic": false,
                "info": "The first text input to concatenate.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "text1",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "text2": {
                "_input_type": "MessageTextInput",
                "advanced": false,
                "display_name": "Second Text",
                "dynamic": false,
                "info": "The second text input to concatenate.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "text2",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              }
            },
            "tool_mode": false
          },
          "showNode": true,
          "type": "CombineText"
        },
        "dragging": false,
        "id": "CombineText-mihFO",
        "measured": {
          "height": 415,
          "width": 320
        },
        "position": {
          "x": 1856.9717095413623,
          "y": 230.903691824392
        },
        "selected": false,
        "type": "genericNode"
      },
      {
        "data": {
          "id": "TextInput-k2gnd",
          "node": {
            "base_classes": [
              "Message"
            ],
            "beta": false,
            "conditional_paths": [],
            "custom_fields": {},
            "description": "",
            "display_name": "Room name",
            "documentation": "",
            "edited": false,
            "field_order": [
              "input_value"
            ],
            "frozen": false,
            "icon": "type",
            "legacy": false,
            "lf_version": "1.3.4",
            "metadata": {},
            "minimized": false,
            "output_types": [],
            "outputs": [
              {
                "allows_loop": false,
                "cache": true,
                "display_name": "Message",
                "hidden": false,
                "method": "text_response",
                "name": "text",
                "selected": "Message",
                "tool_mode": true,
                "types": [
                  "Message"
                ],
                "value": "__UNDEFINED__"
              }
            ],
            "pinned": false,
            "template": {
              "_type": "Component",
              "code": {
                "advanced": true,
                "dynamic": true,
                "fileTypes": [],
                "file_path": "",
                "info": "",
                "list": false,
                "load_from_db": false,
                "multiline": true,
                "name": "code",
                "password": false,
                "placeholder": "",
                "required": true,
                "show": true,
                "title_case": false,
                "type": "code",
                "value": "from langflow.base.io.text import TextComponent\nfrom langflow.io import MultilineInput, Output\nfrom langflow.schema.message import Message\n\n\nclass TextInputComponent(TextComponent):\n    display_name = \"Text Input\"\n    description = \"Get text inputs from the Playground.\"\n    icon = \"type\"\n    name = \"TextInput\"\n\n    inputs = [\n        MultilineInput(\n            name=\"input_value\",\n            display_name=\"Text\",\n            info=\"Text to be passed as input.\",\n        ),\n    ]\n    outputs = [\n        Output(display_name=\"Message\", name=\"text\", method=\"text_response\"),\n    ]\n\n    def text_response(self) -> Message:\n        return Message(\n            text=self.input_value,\n        )\n"
              },
              "input_value": {
                "_input_type": "MultilineInput",
                "advanced": false,
                "copy_field": false,
                "display_name": "Text",
                "dynamic": false,
                "info": "Text to be passed as input.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "multiline": true,
                "name": "input_value",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              }
            },
            "tool_mode": false
          },
          "showNode": true,
          "type": "TextInput"
        },
        "dragging": false,
        "id": "TextInput-k2gnd",
        "measured": {
          "height": 197,
          "width": 320
        },
        "position": {
          "x": 84.80110188066712,
          "y": 402.55831665493594
        },
        "selected": false,
        "type": "genericNode"
      },
      {
        "data": {
          "id": "ChatOutput-PJLFw",
          "node": {
            "base_classes": [
              "Message"
            ],
            "beta": false,
            "conditional_paths": [],
            "custom_fields": {},
            "description": "Display a chat message in the Playground.",
            "display_name": "Chat Output",
            "documentation": "",
            "edited": false,
            "field_order": [
              "input_value",
              "should_store_message",
              "sender",
              "sender_name",
              "session_id",
              "data_template",
              "background_color",
              "chat_icon",
              "text_color",
              "clean_data"
            ],
            "frozen": false,
            "icon": "MessagesSquare",
            "legacy": false,
            "lf_version": "1.3.4",
            "metadata": {},
            "minimized": true,
            "output_types": [],
            "outputs": [
              {
                "allows_loop": false,
                "cache": true,
                "display_name": "Message",
                "method": "message_response",
                "name": "message",
                "selected": "Message",
                "tool_mode": true,
                "types": [
                  "Message"
                ],
                "value": "__UNDEFINED__"
              }
            ],
            "pinned": false,
            "template": {
              "_type": "Component",
              "background_color": {
                "_input_type": "MessageTextInput",
                "advanced": true,
                "display_name": "Background Color",
                "dynamic": false,
                "info": "The background color of the icon.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "background_color",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "chat_icon": {
                "_input_type": "MessageTextInput",
                "advanced": true,
                "display_name": "Icon",
                "dynamic": false,
                "info": "The icon of the message.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "chat_icon",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "clean_data": {
                "_input_type": "BoolInput",
                "advanced": true,
                "display_name": "Basic Clean Data",
                "dynamic": false,
                "info": "Whether to clean the data",
                "list": false,
                "list_add_label": "Add More",
                "name": "clean_data",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "bool",
                "value": true
              },
              "code": {
                "advanced": true,
                "dynamic": true,
                "fileTypes": [],
                "file_path": "",
                "info": "",
                "list": false,
                "load_from_db": false,
                "multiline": true,
                "name": "code",
                "password": false,
                "placeholder": "",
                "required": true,
                "show": true,
                "title_case": false,
                "type": "code",
                "value": "from collections.abc import Generator\nfrom typing import Any\n\nfrom langflow.base.io.chat import ChatComponent\nfrom langflow.inputs import BoolInput\nfrom langflow.inputs.inputs import HandleInput\nfrom langflow.io import DropdownInput, MessageTextInput, Output\nfrom langflow.schema.data import Data\nfrom langflow.schema.dataframe import DataFrame\nfrom langflow.schema.message import Message\nfrom langflow.schema.properties import Source\nfrom langflow.utils.constants import (\n    MESSAGE_SENDER_AI,\n    MESSAGE_SENDER_NAME_AI,\n    MESSAGE_SENDER_USER,\n)\n\n\nclass ChatOutput(ChatComponent):\n    display_name = \"Chat Output\"\n    description = \"Display a chat message in the Playground.\"\n    icon = \"MessagesSquare\"\n    name = \"ChatOutput\"\n    minimized = True\n\n    inputs = [\n        HandleInput(\n            name=\"input_value\",\n            display_name=\"Text\",\n            info=\"Message to be passed as output.\",\n            input_types=[\"Data\", \"DataFrame\", \"Message\"],\n            required=True,\n        ),\n        BoolInput(\n            name=\"should_store_message\",\n            display_name=\"Store Messages\",\n            info=\"Store the message in the history.\",\n            value=True,\n            advanced=True,\n        ),\n        DropdownInput(\n            name=\"sender\",\n            display_name=\"Sender Type\",\n            options=[MESSAGE_SENDER_AI, MESSAGE_SENDER_USER],\n            value=MESSAGE_SENDER_AI,\n            advanced=True,\n            info=\"Type of sender.\",\n        ),\n        MessageTextInput(\n            name=\"sender_name\",\n            display_name=\"Sender Name\",\n            info=\"Name of the sender.\",\n            value=MESSAGE_SENDER_NAME_AI,\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"session_id\",\n            display_name=\"Session ID\",\n            info=\"The session ID of the chat. If empty, the current session ID parameter will be used.\",\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"data_template\",\n            display_name=\"Data Template\",\n            value=\"{text}\",\n            advanced=True,\n            info=\"Template to convert Data to Text. If left empty, it will be dynamically set to the Data's text key.\",\n        ),\n        MessageTextInput(\n            name=\"background_color\",\n            display_name=\"Background Color\",\n            info=\"The background color of the icon.\",\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"chat_icon\",\n            display_name=\"Icon\",\n            info=\"The icon of the message.\",\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"text_color\",\n            display_name=\"Text Color\",\n            info=\"The text color of the name\",\n            advanced=True,\n        ),\n        BoolInput(\n            name=\"clean_data\",\n            display_name=\"Basic Clean Data\",\n            value=True,\n            info=\"Whether to clean the data\",\n            advanced=True,\n        ),\n    ]\n    outputs = [\n        Output(\n            display_name=\"Message\",\n            name=\"message\",\n            method=\"message_response\",\n        ),\n    ]\n\n    def _build_source(self, id_: str | None, display_name: str | None, source: str | None) -> Source:\n        source_dict = {}\n        if id_:\n            source_dict[\"id\"] = id_\n        if display_name:\n            source_dict[\"display_name\"] = display_name\n        if source:\n            # Handle case where source is a ChatOpenAI object\n            if hasattr(source, \"model_name\"):\n                source_dict[\"source\"] = source.model_name\n            elif hasattr(source, \"model\"):\n                source_dict[\"source\"] = str(source.model)\n            else:\n                source_dict[\"source\"] = str(source)\n        return Source(**source_dict)\n\n    async def message_response(self) -> Message:\n        # First convert the input to string if needed\n        text = self.convert_to_string()\n        # Get source properties\n        source, icon, display_name, source_id = self.get_properties_from_source_component()\n        background_color = self.background_color\n        text_color = self.text_color\n        if self.chat_icon:\n            icon = self.chat_icon\n\n        # Create or use existing Message object\n        if isinstance(self.input_value, Message):\n            message = self.input_value\n            # Update message properties\n            message.text = text\n        else:\n            message = Message(text=text)\n\n        # Set message properties\n        message.sender = self.sender\n        message.sender_name = self.sender_name\n        message.session_id = self.session_id\n        message.flow_id = self.graph.flow_id if hasattr(self, \"graph\") else None\n        message.properties.source = self._build_source(source_id, display_name, source)\n        message.properties.icon = icon\n        message.properties.background_color = background_color\n        message.properties.text_color = text_color\n\n        # Store message if needed\n        if self.session_id and self.should_store_message:\n            stored_message = await self.send_message(message)\n            self.message.value = stored_message\n            message = stored_message\n\n        self.status = message\n        return message\n\n    def _validate_input(self) -> None:\n        \"\"\"Validate the input data and raise ValueError if invalid.\"\"\"\n        if self.input_value is None:\n            msg = \"Input data cannot be None\"\n            raise ValueError(msg)\n        if isinstance(self.input_value, list) and not all(\n            isinstance(item, Message | Data | DataFrame | str) for item in self.input_value\n        ):\n            invalid_types = [\n                type(item).__name__\n                for item in self.input_value\n                if not isinstance(item, Message | Data | DataFrame | str)\n            ]\n            msg = f\"Expected Data or DataFrame or Message or str, got {invalid_types}\"\n            raise TypeError(msg)\n        if not isinstance(\n            self.input_value,\n            Message | Data | DataFrame | str | list | Generator | type(None),\n        ):\n            type_name = type(self.input_value).__name__\n            msg = f\"Expected Data or DataFrame or Message or str, Generator or None, got {type_name}\"\n            raise TypeError(msg)\n\n    def _safe_convert(self, data: Any) -> str:\n        \"\"\"Safely convert input data to string.\"\"\"\n        try:\n            if isinstance(data, str):\n                return data\n            if isinstance(data, Message):\n                return data.get_text()\n            if isinstance(data, Data):\n                if data.get_text() is None:\n                    msg = \"Empty Data object\"\n                    raise ValueError(msg)\n                return data.get_text()\n            if isinstance(data, DataFrame):\n                if self.clean_data:\n                    # Remove empty rows\n                    data = data.dropna(how=\"all\")\n                    # Remove empty lines in each cell\n                    data = data.replace(r\"^\\s*$\", \"\", regex=True)\n                    # Replace multiple newlines with a single newline\n                    data = data.replace(r\"\\n+\", \"\\n\", regex=True)\n\n                # Replace pipe characters to avoid markdown table issues\n                processed_data = data.replace(r\"\\|\", r\"\\\\|\", regex=True)\n\n                processed_data = processed_data.map(\n                    lambda x: str(x).replace(\"\\n\", \"<br/>\") if isinstance(x, str) else x\n                )\n\n                return processed_data.to_markdown(index=False)\n            return str(data)\n        except (ValueError, TypeError, AttributeError) as e:\n            msg = f\"Error converting data: {e!s}\"\n            raise ValueError(msg) from e\n\n    def convert_to_string(self) -> str | Generator[Any, None, None]:\n        \"\"\"Convert input data to string with proper error handling.\"\"\"\n        self._validate_input()\n        if isinstance(self.input_value, list):\n            return \"\\n\".join([self._safe_convert(item) for item in self.input_value])\n        if isinstance(self.input_value, Generator):\n            return self.input_value\n        return self._safe_convert(self.input_value)\n"
              },
              "data_template": {
                "_input_type": "MessageTextInput",
                "advanced": true,
                "display_name": "Data Template",
                "dynamic": false,
                "info": "Template to convert Data to Text. If left empty, it will be dynamically set to the Data's text key.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "data_template",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": "{text}"
              },
              "input_value": {
                "_input_type": "HandleInput",
                "advanced": false,
                "display_name": "Text",
                "dynamic": false,
                "info": "Message to be passed as output.",
                "input_types": [
                  "Data",
                  "DataFrame",
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "name": "input_value",
                "placeholder": "",
                "required": true,
                "show": true,
                "title_case": false,
                "trace_as_metadata": true,
                "type": "other",
                "value": ""
              },
              "sender": {
                "_input_type": "DropdownInput",
                "advanced": true,
                "combobox": false,
                "dialog_inputs": {},
                "display_name": "Sender Type",
                "dynamic": false,
                "info": "Type of sender.",
                "name": "sender",
                "options": [
                  "Machine",
                  "User"
                ],
                "options_metadata": [],
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "str",
                "value": "Machine"
              },
              "sender_name": {
                "_input_type": "MessageTextInput",
                "advanced": true,
                "display_name": "Sender Name",
                "dynamic": false,
                "info": "Name of the sender.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "sender_name",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": "AI"
              },
              "session_id": {
                "_input_type": "MessageTextInput",
                "advanced": true,
                "display_name": "Session ID",
                "dynamic": false,
                "info": "The session ID of the chat. If empty, the current session ID parameter will be used.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "session_id",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "should_store_message": {
                "_input_type": "BoolInput",
                "advanced": true,
                "display_name": "Store Messages",
                "dynamic": false,
                "info": "Store the message in the history.",
                "list": false,
                "list_add_label": "Add More",
                "name": "should_store_message",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "bool",
                "value": true
              },
              "text_color": {
                "_input_type": "MessageTextInput",
                "advanced": true,
                "display_name": "Text Color",
                "dynamic": false,
                "info": "The text color of the name",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "text_color",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              }
            },
            "tool_mode": false
          },
          "showNode": false,
          "type": "ChatOutput"
        },
        "dragging": false,
        "id": "ChatOutput-PJLFw",
        "measured": {
          "height": 66,
          "width": 192
        },
        "position": {
          "x": 3694.5530314262096,
          "y": 603.1577697794686
        },
        "selected": false,
        "type": "genericNode"
      },
      {
        "data": {
          "id": "note-wQM7T",
          "node": {
            "description": "\n# Create a DocSpace room and a corresponding Slack channel with a pinned link to the room\n\nThis template creates a public DocSpace room and a corresponding Slack channel with the specified name. It then posts a message to the created Slack channel with a link to the room and pins it.\n\n## Prerequisites\n\n- **DocSpace credentials**\n- **Slack OAuth Token**\n\n## Quickstart\n\n1. Provide DocSpace **Base URL**, **Username** and **Password**.\n2. Provide the Slack **OAuth token** directly to the components or as a global variable.\n3. To run the flow, click **Playground** and write a title for a new public room.\n\n\n\n\n\n",
            "display_name": "",
            "documentation": "",
            "template": {}
          },
          "type": "note"
        },
        "dragging": false,
        "height": 708,
        "id": "note-wQM7T",
        "measured": {
          "height": 708,
          "width": 527
        },
        "position": {
          "x": -813.9072663043712,
          "y": -356.75064002032695
        },
        "resizing": false,
        "selected": false,
        "type": "noteNode",
        "width": 526
      },
      {
        "data": {
          "id": "ParserComponent-ep6XV",
          "node": {
            "base_classes": [
              "Message"
            ],
            "beta": false,
            "conditional_paths": [],
            "custom_fields": {},
            "description": "Format a DataFrame or Data object into text using a template. Enable 'Stringify' to convert input into a readable string instead.",
            "display_name": "Parser",
            "documentation": "",
            "edited": false,
            "field_order": [
              "mode",
              "pattern",
              "input_data",
              "sep"
            ],
            "frozen": false,
            "icon": "braces",
            "legacy": false,
            "lf_version": "1.3.4",
            "metadata": {},
            "minimized": false,
            "output_types": [],
            "outputs": [
              {
                "allows_loop": false,
                "cache": true,
                "display_name": "Parsed Text",
                "hidden": false,
                "method": "parse_combined_text",
                "name": "parsed_text",
                "options": null,
                "required_inputs": null,
                "selected": "Message",
                "tool_mode": true,
                "types": [
                  "Message"
                ],
                "value": "__UNDEFINED__"
              }
            ],
            "pinned": false,
            "template": {
              "_type": "Component",
              "clean_data": {
                "_input_type": "BoolInput",
                "advanced": true,
                "display_name": "Clean Data",
                "dynamic": false,
                "info": "Enable to clean the data by removing empty rows and lines in each cell of the DataFrame/ Data object.",
                "list": false,
                "list_add_label": "Add More",
                "name": "clean_data",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "bool",
                "value": true
              },
              "code": {
                "advanced": true,
                "dynamic": true,
                "fileTypes": [],
                "file_path": "",
                "info": "",
                "list": false,
                "load_from_db": false,
                "multiline": true,
                "name": "code",
                "password": false,
                "placeholder": "",
                "required": true,
                "show": true,
                "title_case": false,
                "type": "code",
                "value": "import json\nfrom typing import Any\n\nfrom langflow.custom import Component\nfrom langflow.io import (\n    BoolInput,\n    HandleInput,\n    MessageTextInput,\n    MultilineInput,\n    Output,\n    TabInput,\n)\nfrom langflow.schema import Data, DataFrame\nfrom langflow.schema.message import Message\n\n\nclass ParserComponent(Component):\n    display_name = \"Parser\"\n    description = (\n        \"Format a DataFrame or Data object into text using a template. \"\n        \"Enable 'Stringify' to convert input into a readable string instead.\"\n    )\n    icon = \"braces\"\n\n    inputs = [\n        TabInput(\n            name=\"mode\",\n            display_name=\"Mode\",\n            options=[\"Parser\", \"Stringify\"],\n            value=\"Parser\",\n            info=\"Convert into raw string instead of using a template.\",\n            real_time_refresh=True,\n        ),\n        MultilineInput(\n            name=\"pattern\",\n            display_name=\"Template\",\n            info=(\n                \"Use variables within curly brackets to extract column values for DataFrames \"\n                \"or key values for Data.\"\n                \"For example: `Name: {Name}, Age: {Age}, Country: {Country}`\"\n            ),\n            value=\"Text: {text}\",  # Example default\n            dynamic=True,\n            show=True,\n            required=True,\n        ),\n        HandleInput(\n            name=\"input_data\",\n            display_name=\"Data or DataFrame\",\n            input_types=[\"DataFrame\", \"Data\"],\n            info=\"Accepts either a DataFrame or a Data object.\",\n            required=True,\n        ),\n        MessageTextInput(\n            name=\"sep\",\n            display_name=\"Separator\",\n            advanced=True,\n            value=\"\\n\",\n            info=\"String used to separate rows/items.\",\n        ),\n    ]\n\n    outputs = [\n        Output(\n            display_name=\"Parsed Text\",\n            name=\"parsed_text\",\n            info=\"Formatted text output.\",\n            method=\"parse_combined_text\",\n        ),\n    ]\n\n    def update_build_config(self, build_config, field_value, field_name=None):\n        \"\"\"Dynamically hide/show `template` and enforce requirement based on `stringify`.\"\"\"\n        if field_name == \"mode\":\n            build_config[\"pattern\"][\"show\"] = self.mode == \"Parser\"\n            build_config[\"pattern\"][\"required\"] = self.mode == \"Parser\"\n            if field_value:\n                clean_data = BoolInput(\n                    name=\"clean_data\",\n                    display_name=\"Clean Data\",\n                    info=(\n                        \"Enable to clean the data by removing empty rows and lines \"\n                        \"in each cell of the DataFrame/ Data object.\"\n                    ),\n                    value=True,\n                    advanced=True,\n                    required=False,\n                )\n                build_config[\"clean_data\"] = clean_data.to_dict()\n            else:\n                build_config.pop(\"clean_data\", None)\n\n        return build_config\n\n    def _clean_args(self):\n        \"\"\"Prepare arguments based on input type.\"\"\"\n        input_data = self.input_data\n\n        match input_data:\n            case list() if all(isinstance(item, Data) for item in input_data):\n                msg = \"List of Data objects is not supported.\"\n                raise ValueError(msg)\n            case DataFrame():\n                return input_data, None\n            case Data():\n                return None, input_data\n            case dict() if \"data\" in input_data:\n                try:\n                    if \"columns\" in input_data:  # Likely a DataFrame\n                        return DataFrame.from_dict(input_data), None\n                    # Likely a Data object\n                    return None, Data(**input_data)\n                except (TypeError, ValueError, KeyError) as e:\n                    msg = f\"Invalid structured input provided: {e!s}\"\n                    raise ValueError(msg) from e\n            case _:\n                msg = f\"Unsupported input type: {type(input_data)}. Expected DataFrame or Data.\"\n                raise ValueError(msg)\n\n    def parse_combined_text(self) -> Message:\n        \"\"\"Parse all rows/items into a single text or convert input to string if `stringify` is enabled.\"\"\"\n        # Early return for stringify option\n        if self.mode == \"Stringify\":\n            return self.convert_to_string()\n\n        df, data = self._clean_args()\n\n        lines = []\n        if df is not None:\n            for _, row in df.iterrows():\n                formatted_text = self.pattern.format(**row.to_dict())\n                lines.append(formatted_text)\n        elif data is not None:\n            formatted_text = self.pattern.format(**data.data)\n            lines.append(formatted_text)\n\n        combined_text = self.sep.join(lines)\n        self.status = combined_text\n        return Message(text=combined_text)\n\n    def _safe_convert(self, data: Any) -> str:\n        \"\"\"Safely convert input data to string.\"\"\"\n        try:\n            if isinstance(data, str):\n                return data\n            if isinstance(data, Message):\n                return data.get_text()\n            if isinstance(data, Data):\n                return json.dumps(data.data)\n            if isinstance(data, DataFrame):\n                if hasattr(self, \"clean_data\") and self.clean_data:\n                    # Remove empty rows\n                    data = data.dropna(how=\"all\")\n                    # Remove empty lines in each cell\n                    data = data.replace(r\"^\\s*$\", \"\", regex=True)\n                    # Replace multiple newlines with a single newline\n                    data = data.replace(r\"\\n+\", \"\\n\", regex=True)\n                return data.to_markdown(index=False)\n            return str(data)\n        except (ValueError, TypeError, AttributeError) as e:\n            msg = f\"Error converting data: {e!s}\"\n            raise ValueError(msg) from e\n\n    def convert_to_string(self) -> Message:\n        \"\"\"Convert input data to string with proper error handling.\"\"\"\n        result = \"\"\n        if isinstance(self.input_data, list):\n            result = \"\\n\".join([self._safe_convert(item) for item in self.input_data])\n        else:\n            result = self._safe_convert(self.input_data)\n        self.log(f\"Converted to string with length: {len(result)}\")\n\n        message = Message(text=result)\n        self.status = message\n        return message\n"
              },
              "input_data": {
                "_input_type": "HandleInput",
                "advanced": false,
                "display_name": "Data or DataFrame",
                "dynamic": false,
                "info": "Accepts either a DataFrame or a Data object.",
                "input_types": [
                  "DataFrame",
                  "Data"
                ],
                "list": false,
                "list_add_label": "Add More",
                "name": "input_data",
                "placeholder": "",
                "required": true,
                "show": true,
                "title_case": false,
                "trace_as_metadata": true,
                "type": "other",
                "value": ""
              },
              "mode": {
                "_input_type": "TabInput",
                "advanced": false,
                "display_name": "Mode",
                "dynamic": false,
                "info": "Convert into raw string instead of using a template.",
                "name": "mode",
                "options": [
                  "Parser",
                  "Stringify"
                ],
                "placeholder": "",
                "real_time_refresh": true,
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "tab",
                "value": "Parser"
              },
              "pattern": {
                "_input_type": "MultilineInput",
                "advanced": false,
                "copy_field": false,
                "display_name": "Template",
                "dynamic": true,
                "info": "Use variables within curly brackets to extract column values for DataFrames or key values for Data.For example: `Name: {Name}, Age: {Age}, Country: {Country}`",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "multiline": true,
                "name": "pattern",
                "placeholder": "",
                "required": true,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": "{id}"
              },
              "sep": {
                "_input_type": "MessageTextInput",
                "advanced": true,
                "display_name": "Separator",
                "dynamic": false,
                "info": "String used to separate rows/items.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "sep",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": "\n"
              }
            },
            "tool_mode": false
          },
          "showNode": true,
          "type": "ParserComponent"
        },
        "dragging": false,
        "id": "ParserComponent-ep6XV",
        "measured": {
          "height": 394,
          "width": 320
        },
        "position": {
          "x": 800.6056836487232,
          "y": -16.27467907434879
        },
        "selected": false,
        "type": "genericNode"
      },
      {
        "data": {
          "id": "DataMapper-bc8pD",
          "node": {
            "base_classes": [
              "Data",
              "Message"
            ],
            "beta": false,
            "category": "processing",
            "conditional_paths": [],
            "custom_fields": {},
            "description": "Maps data using patterns or literal values to a new Data object or JSON string.",
            "display_name": "Data Mapper",
            "documentation": "",
            "edited": false,
            "field_order": [
              "input_data",
              "number_of_fields"
            ],
            "frozen": false,
            "icon": "table",
            "key": "DataMapper",
            "legacy": false,
            "lf_version": "1.3.4",
            "metadata": {},
            "minimized": false,
            "output_types": [],
            "outputs": [
              {
                "allows_loop": false,
                "cache": true,
                "display_name": "Data",
                "hidden": false,
                "method": "build_data",
                "name": "data",
                "options": null,
                "required_inputs": null,
                "selected": "Data",
                "tool_mode": true,
                "types": [
                  "Data"
                ],
                "value": "__UNDEFINED__"
              },
              {
                "allows_loop": false,
                "cache": true,
                "display_name": "Message",
                "hidden": null,
                "method": "build_message",
                "name": "message",
                "options": null,
                "required_inputs": null,
                "selected": "Message",
                "tool_mode": true,
                "types": [
                  "Message"
                ],
                "value": "__UNDEFINED__"
              }
            ],
            "pinned": false,
            "score": 0.12027401062119145,
            "template": {
              "_type": "Component",
              "code": {
                "advanced": true,
                "dynamic": true,
                "fileTypes": [],
                "file_path": "",
                "info": "",
                "list": false,
                "load_from_db": false,
                "multiline": true,
                "name": "code",
                "password": false,
                "placeholder": "",
                "required": true,
                "show": true,
                "title_case": false,
                "type": "code",
                "value": "from langflow.template.field.base import Output\nfrom langflow.schema.data import Data\nfrom langflow.schema.message import Message\nfrom langflow.custom import Component\nfrom langflow.inputs.inputs import DataInput, DictInput, IntInput\nfrom langflow.schema.dotdict import dotdict\nfrom langflow.field_typing.range_spec import RangeSpec\nfrom typing import Any\nimport json\n\n\nclass DataMapper(Component):\n    display_name = \"Data Mapper\"\n    description = \"Maps data using patterns or literal values to a new Data object or JSON string.\"\n    icon = \"table\"\n    name = \"DataMapper\"\n    MAX_FIELDS = 15\n\n    inputs = [\n        DataInput(\n            name=\"input_data\",\n            display_name=\"Data\",\n            info=\"Input data to map from.\",\n        ),\n        IntInput(\n            name=\"number_of_fields\",\n            display_name=\"Number of Fields\",\n            info=\"Number of field mappings to define.\",\n            real_time_refresh=True,\n            value=0,\n            range_spec=RangeSpec(min=0, max=MAX_FIELDS, step=1, step_type=\"int\"),\n        ),\n    ]\n\n    outputs = [\n        Output(\n            display_name=\"Data\",\n            name=\"data\",\n            method=\"build_data\"\n        ),\n        Output(\n            display_name=\"Message\",\n            name=\"message\",\n            method=\"build_message\",\n        ),\n    ]\n\n    def update_build_config(self, build_config: dotdict, field_value: Any, field_name: str | None = None):\n        if field_name == \"number_of_fields\":\n            default_keys = {\n                \"number_of_fields\", \n                \"input_data\",\n                \"_type\",\n                \"code\"\n            }\n            \n            try:\n                field_value_int = int(field_value)\n            except ValueError:\n                return build_config\n\n            if field_value_int > self.MAX_FIELDS:\n                build_config[\"number_of_fields\"][\"value\"] = self.MAX_FIELDS\n                msg = f\"Number of fields cannot exceed {self.MAX_FIELDS}.\"\n                raise ValueError(msg)\n\n            existing_fields = {}\n            for key in list(build_config.keys()):\n                if key not in default_keys:\n                    existing_fields[key] = build_config.pop(key)\n\n            for i in range(field_value_int):\n                field_field = f\"field_{i}\"\n\n                if field_field in existing_fields:\n                    build_config[field_field] = existing_fields[field_field]\n                else:\n                    field = DictInput(\n                        display_name=f\"Field {i + 1}\",\n                        name=field_field,\n                        info=f\"Key-value pair where key is the output field name and value is either a pattern in curly brackets {{{{object.field}}}} or a literal value.\",\n                        input_types=[\"Message\"],\n                    )\n                    build_config[field.name] = field.to_dict()\n\n            build_config[\"number_of_fields\"][\"value\"] = field_value_int\n        return build_config\n\n    def _get_value_from_path(self, data_dict, path):\n        parts = path.split('.')\n        current = data_dict\n\n        for part in parts:\n            if '[' in part and part.endswith(']'):\n                field_name, index_part = part.split('[', 1)\n                index = int(index_part[:-1])\n\n                if field_name in current and isinstance(current[field_name], list):\n                    if 0 <= index < len(current[field_name]):\n                        current = current[field_name][index]\n                    else:\n                        return None\n                else:\n                    return None\n            else:\n                if isinstance(current, dict) and part in current:\n                    current = current[part]\n                else:\n                    return None\n\n        return current\n\n    def _map_data(self):\n        input_data = self.input_data\n        fields = self._get_fields()\n\n        result_data = {}\n\n        if isinstance(input_data, Data):\n            source_data = input_data.data\n        elif isinstance(input_data, dict):\n            source_data = input_data\n        else:\n            return {}\n\n        for field_name, value in fields.items():\n            if isinstance(value, str) and value.startswith('{') and value.endswith('}'):\n                pattern = value[1:-1]\n                extracted_value = self._get_value_from_path(source_data, pattern)\n\n                if not field_name:\n                    if '[' in pattern and pattern.split('.')[-1].endswith(']'):\n                        last_part = pattern.split('.')[-1]\n                        field_name = last_part.split('[')[0]\n                    else:\n                        field_name = pattern.split('.')[-1]\n\n                if extracted_value is not None:\n                    result_data[field_name] = extracted_value\n            else:\n                result_data[field_name] = value\n\n        return result_data\n\n    def _get_fields(self):\n        fields = {}\n\n        num_fields = getattr(self, \"number_of_fields\", 0)\n\n        for i in range(num_fields): \n            field_field = f\"field_{i}\"\n\n            if hasattr(self, field_field):\n                field_input = getattr(self, field_field, {})\n\n                if isinstance(field_input, dict) and field_input:\n                    for key, value in field_input.items():\n                        if isinstance(value, Message):\n                            fields[key] = value.text\n                        else:\n                            fields[key] = value\n                elif isinstance(field_input, Message):\n                    fields[field_input.text] = field_input.text\n\n        return fields\n\n    def build_data(self) -> Data:\n        result_data = self._map_data()\n        return Data(data=result_data)\n\n    def build_message(self) -> Message:\n        result_data = self._map_data()\n        try:\n            json_string = json.dumps(result_data, indent=2, default=str)\n            return Message(text=json_string)\n        except Exception as e:\n            return Message(text=f\"Error converting to JSON: {str(e)}\", error=True)"
              },
              "field_0": {
                "_input_type": "DictInput",
                "advanced": false,
                "display_name": "Field 1",
                "dynamic": false,
                "info": "Key-value pair where key is the output field name and value is either a pattern in curly brackets {{object.field}} or a literal value.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "name": "field_0",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "type": "dict",
                "value": {
                  "id": "{channel.id}"
                }
              },
              "input_data": {
                "_input_type": "DataInput",
                "advanced": false,
                "display_name": "Data",
                "dynamic": false,
                "info": "Input data to map from.",
                "input_types": [
                  "Data"
                ],
                "list": false,
                "list_add_label": "Add More",
                "name": "input_data",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "other",
                "value": ""
              },
              "number_of_fields": {
                "_input_type": "IntInput",
                "advanced": false,
                "display_name": "Number of Fields",
                "dynamic": false,
                "info": "Number of field mappings to define.",
                "list": false,
                "list_add_label": "Add More",
                "name": "number_of_fields",
                "placeholder": "",
                "range_spec": {
                  "max": 15,
                  "min": 0,
                  "step": 1,
                  "step_type": "int"
                },
                "real_time_refresh": true,
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "int",
                "value": 1
              }
            },
            "tool_mode": false
          },
          "showNode": true,
          "type": "DataMapper"
        },
        "dragging": false,
        "id": "DataMapper-bc8pD",
        "measured": {
          "height": 424,
          "width": 320
        },
        "position": {
          "x": 810.8041737747039,
          "y": 603.9999210251353
        },
        "selected": false,
        "type": "genericNode"
      },
      {
        "data": {
          "id": "ParserComponent-cPUXq",
          "node": {
            "base_classes": [
              "Message"
            ],
            "beta": false,
            "conditional_paths": [],
            "custom_fields": {},
            "description": "Format a DataFrame or Data object into text using a template. Enable 'Stringify' to convert input into a readable string instead.",
            "display_name": "Parser",
            "documentation": "",
            "edited": false,
            "field_order": [
              "mode",
              "pattern",
              "input_data",
              "sep"
            ],
            "frozen": false,
            "icon": "braces",
            "legacy": false,
            "lf_version": "1.3.4",
            "metadata": {},
            "minimized": false,
            "output_types": [],
            "outputs": [
              {
                "allows_loop": false,
                "cache": true,
                "display_name": "Parsed Text",
                "hidden": false,
                "method": "parse_combined_text",
                "name": "parsed_text",
                "selected": "Message",
                "tool_mode": true,
                "types": [
                  "Message"
                ],
                "value": "__UNDEFINED__"
              }
            ],
            "pinned": false,
            "template": {
              "_type": "Component",
              "code": {
                "advanced": true,
                "dynamic": true,
                "fileTypes": [],
                "file_path": "",
                "info": "",
                "list": false,
                "load_from_db": false,
                "multiline": true,
                "name": "code",
                "password": false,
                "placeholder": "",
                "required": true,
                "show": true,
                "title_case": false,
                "type": "code",
                "value": "import json\nfrom typing import Any\n\nfrom langflow.custom import Component\nfrom langflow.io import (\n    BoolInput,\n    HandleInput,\n    MessageTextInput,\n    MultilineInput,\n    Output,\n    TabInput,\n)\nfrom langflow.schema import Data, DataFrame\nfrom langflow.schema.message import Message\n\n\nclass ParserComponent(Component):\n    display_name = \"Parser\"\n    description = (\n        \"Format a DataFrame or Data object into text using a template. \"\n        \"Enable 'Stringify' to convert input into a readable string instead.\"\n    )\n    icon = \"braces\"\n\n    inputs = [\n        TabInput(\n            name=\"mode\",\n            display_name=\"Mode\",\n            options=[\"Parser\", \"Stringify\"],\n            value=\"Parser\",\n            info=\"Convert into raw string instead of using a template.\",\n            real_time_refresh=True,\n        ),\n        MultilineInput(\n            name=\"pattern\",\n            display_name=\"Template\",\n            info=(\n                \"Use variables within curly brackets to extract column values for DataFrames \"\n                \"or key values for Data.\"\n                \"For example: `Name: {Name}, Age: {Age}, Country: {Country}`\"\n            ),\n            value=\"Text: {text}\",  # Example default\n            dynamic=True,\n            show=True,\n            required=True,\n        ),\n        HandleInput(\n            name=\"input_data\",\n            display_name=\"Data or DataFrame\",\n            input_types=[\"DataFrame\", \"Data\"],\n            info=\"Accepts either a DataFrame or a Data object.\",\n            required=True,\n        ),\n        MessageTextInput(\n            name=\"sep\",\n            display_name=\"Separator\",\n            advanced=True,\n            value=\"\\n\",\n            info=\"String used to separate rows/items.\",\n        ),\n    ]\n\n    outputs = [\n        Output(\n            display_name=\"Parsed Text\",\n            name=\"parsed_text\",\n            info=\"Formatted text output.\",\n            method=\"parse_combined_text\",\n        ),\n    ]\n\n    def update_build_config(self, build_config, field_value, field_name=None):\n        \"\"\"Dynamically hide/show `template` and enforce requirement based on `stringify`.\"\"\"\n        if field_name == \"mode\":\n            build_config[\"pattern\"][\"show\"] = self.mode == \"Parser\"\n            build_config[\"pattern\"][\"required\"] = self.mode == \"Parser\"\n            if field_value:\n                clean_data = BoolInput(\n                    name=\"clean_data\",\n                    display_name=\"Clean Data\",\n                    info=(\n                        \"Enable to clean the data by removing empty rows and lines \"\n                        \"in each cell of the DataFrame/ Data object.\"\n                    ),\n                    value=True,\n                    advanced=True,\n                    required=False,\n                )\n                build_config[\"clean_data\"] = clean_data.to_dict()\n            else:\n                build_config.pop(\"clean_data\", None)\n\n        return build_config\n\n    def _clean_args(self):\n        \"\"\"Prepare arguments based on input type.\"\"\"\n        input_data = self.input_data\n\n        match input_data:\n            case list() if all(isinstance(item, Data) for item in input_data):\n                msg = \"List of Data objects is not supported.\"\n                raise ValueError(msg)\n            case DataFrame():\n                return input_data, None\n            case Data():\n                return None, input_data\n            case dict() if \"data\" in input_data:\n                try:\n                    if \"columns\" in input_data:  # Likely a DataFrame\n                        return DataFrame.from_dict(input_data), None\n                    # Likely a Data object\n                    return None, Data(**input_data)\n                except (TypeError, ValueError, KeyError) as e:\n                    msg = f\"Invalid structured input provided: {e!s}\"\n                    raise ValueError(msg) from e\n            case _:\n                msg = f\"Unsupported input type: {type(input_data)}. Expected DataFrame or Data.\"\n                raise ValueError(msg)\n\n    def parse_combined_text(self) -> Message:\n        \"\"\"Parse all rows/items into a single text or convert input to string if `stringify` is enabled.\"\"\"\n        # Early return for stringify option\n        if self.mode == \"Stringify\":\n            return self.convert_to_string()\n\n        df, data = self._clean_args()\n\n        lines = []\n        if df is not None:\n            for _, row in df.iterrows():\n                formatted_text = self.pattern.format(**row.to_dict())\n                lines.append(formatted_text)\n        elif data is not None:\n            formatted_text = self.pattern.format(**data.data)\n            lines.append(formatted_text)\n\n        combined_text = self.sep.join(lines)\n        self.status = combined_text\n        return Message(text=combined_text)\n\n    def _safe_convert(self, data: Any) -> str:\n        \"\"\"Safely convert input data to string.\"\"\"\n        try:\n            if isinstance(data, str):\n                return data\n            if isinstance(data, Message):\n                return data.get_text()\n            if isinstance(data, Data):\n                return json.dumps(data.data)\n            if isinstance(data, DataFrame):\n                if hasattr(self, \"clean_data\") and self.clean_data:\n                    # Remove empty rows\n                    data = data.dropna(how=\"all\")\n                    # Remove empty lines in each cell\n                    data = data.replace(r\"^\\s*$\", \"\", regex=True)\n                    # Replace multiple newlines with a single newline\n                    data = data.replace(r\"\\n+\", \"\\n\", regex=True)\n                return data.to_markdown(index=False)\n            return str(data)\n        except (ValueError, TypeError, AttributeError) as e:\n            msg = f\"Error converting data: {e!s}\"\n            raise ValueError(msg) from e\n\n    def convert_to_string(self) -> Message:\n        \"\"\"Convert input data to string with proper error handling.\"\"\"\n        result = \"\"\n        if isinstance(self.input_data, list):\n            result = \"\\n\".join([self._safe_convert(item) for item in self.input_data])\n        else:\n            result = self._safe_convert(self.input_data)\n        self.log(f\"Converted to string with length: {len(result)}\")\n\n        message = Message(text=result)\n        self.status = message\n        return message\n"
              },
              "input_data": {
                "_input_type": "HandleInput",
                "advanced": false,
                "display_name": "Data or DataFrame",
                "dynamic": false,
                "info": "Accepts either a DataFrame or a Data object.",
                "input_types": [
                  "DataFrame",
                  "Data"
                ],
                "list": false,
                "list_add_label": "Add More",
                "name": "input_data",
                "placeholder": "",
                "required": true,
                "show": true,
                "title_case": false,
                "trace_as_metadata": true,
                "type": "other",
                "value": ""
              },
              "mode": {
                "_input_type": "TabInput",
                "advanced": false,
                "display_name": "Mode",
                "dynamic": false,
                "info": "Convert into raw string instead of using a template.",
                "name": "mode",
                "options": [
                  "Parser",
                  "Stringify"
                ],
                "placeholder": "",
                "real_time_refresh": true,
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "tab",
                "value": "Parser"
              },
              "pattern": {
                "_input_type": "MultilineInput",
                "advanced": false,
                "copy_field": false,
                "display_name": "Template",
                "dynamic": true,
                "info": "Use variables within curly brackets to extract column values for DataFrames or key values for Data.For example: `Name: {Name}, Age: {Age}, Country: {Country}`",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "multiline": true,
                "name": "pattern",
                "placeholder": "",
                "required": true,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": "{id}"
              },
              "sep": {
                "_input_type": "MessageTextInput",
                "advanced": true,
                "display_name": "Separator",
                "dynamic": false,
                "info": "String used to separate rows/items.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "sep",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": "\n"
              }
            },
            "tool_mode": false
          },
          "showNode": true,
          "type": "ParserComponent"
        },
        "dragging": false,
        "id": "ParserComponent-cPUXq",
        "measured": {
          "height": 394,
          "width": 320
        },
        "position": {
          "x": 1167.5878008986467,
          "y": 603.9999210251351
        },
        "selected": false,
        "type": "genericNode"
      },
      {
        "data": {
          "id": "DataMapper-Jmwws",
          "node": {
            "base_classes": [
              "Data",
              "Message"
            ],
            "beta": false,
            "conditional_paths": [],
            "custom_fields": {},
            "description": "Maps data using patterns or literal values to a new Data object or JSON string.",
            "display_name": "Data Mapper",
            "documentation": "",
            "edited": false,
            "field_order": [
              "input_data",
              "number_of_fields"
            ],
            "frozen": false,
            "icon": "table",
            "legacy": false,
            "lf_version": "1.3.4",
            "metadata": {},
            "minimized": false,
            "output_types": [],
            "outputs": [
              {
                "allows_loop": false,
                "cache": true,
                "display_name": "Data",
                "hidden": null,
                "method": "build_data",
                "name": "data",
                "options": null,
                "required_inputs": null,
                "selected": "Data",
                "tool_mode": true,
                "types": [
                  "Data"
                ],
                "value": "__UNDEFINED__"
              },
              {
                "allows_loop": false,
                "cache": true,
                "display_name": "Message",
                "hidden": null,
                "method": "build_message",
                "name": "message",
                "options": null,
                "required_inputs": null,
                "selected": "Message",
                "tool_mode": true,
                "types": [
                  "Message"
                ],
                "value": "__UNDEFINED__"
              }
            ],
            "pinned": false,
            "template": {
              "_type": "Component",
              "code": {
                "advanced": true,
                "dynamic": true,
                "fileTypes": [],
                "file_path": "",
                "info": "",
                "list": false,
                "load_from_db": false,
                "multiline": true,
                "name": "code",
                "password": false,
                "placeholder": "",
                "required": true,
                "show": true,
                "title_case": false,
                "type": "code",
                "value": "from langflow.template.field.base import Output\nfrom langflow.schema.data import Data\nfrom langflow.schema.message import Message\nfrom langflow.custom import Component\nfrom langflow.inputs.inputs import DataInput, DictInput, IntInput\nfrom langflow.schema.dotdict import dotdict\nfrom langflow.field_typing.range_spec import RangeSpec\nfrom typing import Any\nimport json\n\n\nclass DataMapper(Component):\n    display_name = \"Data Mapper\"\n    description = \"Maps data using patterns or literal values to a new Data object or JSON string.\"\n    icon = \"table\"\n    name = \"DataMapper\"\n    MAX_FIELDS = 15\n\n    inputs = [\n        DataInput(\n            name=\"input_data\",\n            display_name=\"Data\",\n            info=\"Input data to map from.\",\n        ),\n        IntInput(\n            name=\"number_of_fields\",\n            display_name=\"Number of Fields\",\n            info=\"Number of field mappings to define.\",\n            real_time_refresh=True,\n            value=0,\n            range_spec=RangeSpec(min=0, max=MAX_FIELDS, step=1, step_type=\"int\"),\n        ),\n    ]\n\n    outputs = [\n        Output(\n            display_name=\"Data\",\n            name=\"data\",\n            method=\"build_data\"\n        ),\n        Output(\n            display_name=\"Message\",\n            name=\"message\",\n            method=\"build_message\",\n        ),\n    ]\n\n    def update_build_config(self, build_config: dotdict, field_value: Any, field_name: str | None = None):\n        if field_name == \"number_of_fields\":\n            default_keys = {\n                \"number_of_fields\", \n                \"input_data\",\n                \"_type\",\n                \"code\"\n            }\n            \n            try:\n                field_value_int = int(field_value)\n            except ValueError:\n                return build_config\n\n            if field_value_int > self.MAX_FIELDS:\n                build_config[\"number_of_fields\"][\"value\"] = self.MAX_FIELDS\n                msg = f\"Number of fields cannot exceed {self.MAX_FIELDS}.\"\n                raise ValueError(msg)\n\n            existing_fields = {}\n            for key in list(build_config.keys()):\n                if key not in default_keys:\n                    existing_fields[key] = build_config.pop(key)\n\n            for i in range(field_value_int):\n                field_field = f\"field_{i}\"\n\n                if field_field in existing_fields:\n                    build_config[field_field] = existing_fields[field_field]\n                else:\n                    field = DictInput(\n                        display_name=f\"Field {i + 1}\",\n                        name=field_field,\n                        info=f\"Key-value pair where key is the output field name and value is either a pattern in curly brackets {{{{object.field}}}} or a literal value.\",\n                        input_types=[\"Message\"],\n                    )\n                    build_config[field.name] = field.to_dict()\n\n            build_config[\"number_of_fields\"][\"value\"] = field_value_int\n        return build_config\n\n    def _get_value_from_path(self, data_dict, path):\n        parts = path.split('.')\n        current = data_dict\n\n        for part in parts:\n            if '[' in part and part.endswith(']'):\n                field_name, index_part = part.split('[', 1)\n                index = int(index_part[:-1])\n\n                if field_name in current and isinstance(current[field_name], list):\n                    if 0 <= index < len(current[field_name]):\n                        current = current[field_name][index]\n                    else:\n                        return None\n                else:\n                    return None\n            else:\n                if isinstance(current, dict) and part in current:\n                    current = current[part]\n                else:\n                    return None\n\n        return current\n\n    def _map_data(self):\n        input_data = self.input_data\n        fields = self._get_fields()\n\n        result_data = {}\n\n        if isinstance(input_data, Data):\n            source_data = input_data.data\n        elif isinstance(input_data, dict):\n            source_data = input_data\n        else:\n            return {}\n\n        for field_name, value in fields.items():\n            if isinstance(value, str) and value.startswith('{') and value.endswith('}'):\n                pattern = value[1:-1]\n                extracted_value = self._get_value_from_path(source_data, pattern)\n\n                if not field_name:\n                    if '[' in pattern and pattern.split('.')[-1].endswith(']'):\n                        last_part = pattern.split('.')[-1]\n                        field_name = last_part.split('[')[0]\n                    else:\n                        field_name = pattern.split('.')[-1]\n\n                if extracted_value is not None:\n                    result_data[field_name] = extracted_value\n            else:\n                result_data[field_name] = value\n\n        return result_data\n\n    def _get_fields(self):\n        fields = {}\n\n        num_fields = getattr(self, \"number_of_fields\", 0)\n\n        for i in range(num_fields): \n            field_field = f\"field_{i}\"\n\n            if hasattr(self, field_field):\n                field_input = getattr(self, field_field, {})\n\n                if isinstance(field_input, dict) and field_input:\n                    for key, value in field_input.items():\n                        if isinstance(value, Message):\n                            fields[key] = value.text\n                        else:\n                            fields[key] = value\n                elif isinstance(field_input, Message):\n                    fields[field_input.text] = field_input.text\n\n        return fields\n\n    def build_data(self) -> Data:\n        result_data = self._map_data()\n        return Data(data=result_data)\n\n    def build_message(self) -> Message:\n        result_data = self._map_data()\n        try:\n            json_string = json.dumps(result_data, indent=2, default=str)\n            return Message(text=json_string)\n        except Exception as e:\n            return Message(text=f\"Error converting to JSON: {str(e)}\", error=True)"
              },
              "field_0": {
                "_input_type": "DictInput",
                "advanced": false,
                "display_name": "Field 1",
                "dynamic": false,
                "info": "Key-value pair where key is the output field name and value is either a pattern in curly brackets {{object.field}} or a literal value.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "name": "field_0",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "type": "dict",
                "value": {
                  "ts": "{message.ts}"
                }
              },
              "input_data": {
                "_input_type": "DataInput",
                "advanced": false,
                "display_name": "Data",
                "dynamic": false,
                "info": "Input data to map from.",
                "input_types": [
                  "Data"
                ],
                "list": false,
                "list_add_label": "Add More",
                "name": "input_data",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "other",
                "value": ""
              },
              "number_of_fields": {
                "_input_type": "IntInput",
                "advanced": false,
                "display_name": "Number of Fields",
                "dynamic": false,
                "info": "Number of field mappings to define.",
                "list": false,
                "list_add_label": "Add More",
                "name": "number_of_fields",
                "placeholder": "",
                "range_spec": {
                  "max": 15,
                  "min": 0,
                  "step": 1,
                  "step_type": "int"
                },
                "real_time_refresh": true,
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "int",
                "value": 1
              }
            },
            "tool_mode": false
          },
          "showNode": true,
          "type": "DataMapper"
        },
        "dragging": false,
        "id": "DataMapper-Jmwws",
        "measured": {
          "height": 424,
          "width": 320
        },
        "position": {
          "x": 2587.0797631445007,
          "y": 649.5608415571405
        },
        "selected": false,
        "type": "genericNode"
      },
      {
        "data": {
          "id": "ParserComponent-B3sHD",
          "node": {
            "base_classes": [
              "Message"
            ],
            "beta": false,
            "conditional_paths": [],
            "custom_fields": {},
            "description": "Format a DataFrame or Data object into text using a template. Enable 'Stringify' to convert input into a readable string instead.",
            "display_name": "Parser",
            "documentation": "",
            "edited": false,
            "field_order": [
              "mode",
              "pattern",
              "input_data",
              "sep"
            ],
            "frozen": false,
            "icon": "braces",
            "legacy": false,
            "lf_version": "1.3.4",
            "metadata": {},
            "minimized": false,
            "output_types": [],
            "outputs": [
              {
                "allows_loop": false,
                "cache": true,
                "display_name": "Parsed Text",
                "hidden": false,
                "method": "parse_combined_text",
                "name": "parsed_text",
                "selected": "Message",
                "tool_mode": true,
                "types": [
                  "Message"
                ],
                "value": "__UNDEFINED__"
              }
            ],
            "pinned": false,
            "template": {
              "_type": "Component",
              "code": {
                "advanced": true,
                "dynamic": true,
                "fileTypes": [],
                "file_path": "",
                "info": "",
                "list": false,
                "load_from_db": false,
                "multiline": true,
                "name": "code",
                "password": false,
                "placeholder": "",
                "required": true,
                "show": true,
                "title_case": false,
                "type": "code",
                "value": "import json\nfrom typing import Any\n\nfrom langflow.custom import Component\nfrom langflow.io import (\n    BoolInput,\n    HandleInput,\n    MessageTextInput,\n    MultilineInput,\n    Output,\n    TabInput,\n)\nfrom langflow.schema import Data, DataFrame\nfrom langflow.schema.message import Message\n\n\nclass ParserComponent(Component):\n    display_name = \"Parser\"\n    description = (\n        \"Format a DataFrame or Data object into text using a template. \"\n        \"Enable 'Stringify' to convert input into a readable string instead.\"\n    )\n    icon = \"braces\"\n\n    inputs = [\n        TabInput(\n            name=\"mode\",\n            display_name=\"Mode\",\n            options=[\"Parser\", \"Stringify\"],\n            value=\"Parser\",\n            info=\"Convert into raw string instead of using a template.\",\n            real_time_refresh=True,\n        ),\n        MultilineInput(\n            name=\"pattern\",\n            display_name=\"Template\",\n            info=(\n                \"Use variables within curly brackets to extract column values for DataFrames \"\n                \"or key values for Data.\"\n                \"For example: `Name: {Name}, Age: {Age}, Country: {Country}`\"\n            ),\n            value=\"Text: {text}\",  # Example default\n            dynamic=True,\n            show=True,\n            required=True,\n        ),\n        HandleInput(\n            name=\"input_data\",\n            display_name=\"Data or DataFrame\",\n            input_types=[\"DataFrame\", \"Data\"],\n            info=\"Accepts either a DataFrame or a Data object.\",\n            required=True,\n        ),\n        MessageTextInput(\n            name=\"sep\",\n            display_name=\"Separator\",\n            advanced=True,\n            value=\"\\n\",\n            info=\"String used to separate rows/items.\",\n        ),\n    ]\n\n    outputs = [\n        Output(\n            display_name=\"Parsed Text\",\n            name=\"parsed_text\",\n            info=\"Formatted text output.\",\n            method=\"parse_combined_text\",\n        ),\n    ]\n\n    def update_build_config(self, build_config, field_value, field_name=None):\n        \"\"\"Dynamically hide/show `template` and enforce requirement based on `stringify`.\"\"\"\n        if field_name == \"mode\":\n            build_config[\"pattern\"][\"show\"] = self.mode == \"Parser\"\n            build_config[\"pattern\"][\"required\"] = self.mode == \"Parser\"\n            if field_value:\n                clean_data = BoolInput(\n                    name=\"clean_data\",\n                    display_name=\"Clean Data\",\n                    info=(\n                        \"Enable to clean the data by removing empty rows and lines \"\n                        \"in each cell of the DataFrame/ Data object.\"\n                    ),\n                    value=True,\n                    advanced=True,\n                    required=False,\n                )\n                build_config[\"clean_data\"] = clean_data.to_dict()\n            else:\n                build_config.pop(\"clean_data\", None)\n\n        return build_config\n\n    def _clean_args(self):\n        \"\"\"Prepare arguments based on input type.\"\"\"\n        input_data = self.input_data\n\n        match input_data:\n            case list() if all(isinstance(item, Data) for item in input_data):\n                msg = \"List of Data objects is not supported.\"\n                raise ValueError(msg)\n            case DataFrame():\n                return input_data, None\n            case Data():\n                return None, input_data\n            case dict() if \"data\" in input_data:\n                try:\n                    if \"columns\" in input_data:  # Likely a DataFrame\n                        return DataFrame.from_dict(input_data), None\n                    # Likely a Data object\n                    return None, Data(**input_data)\n                except (TypeError, ValueError, KeyError) as e:\n                    msg = f\"Invalid structured input provided: {e!s}\"\n                    raise ValueError(msg) from e\n            case _:\n                msg = f\"Unsupported input type: {type(input_data)}. Expected DataFrame or Data.\"\n                raise ValueError(msg)\n\n    def parse_combined_text(self) -> Message:\n        \"\"\"Parse all rows/items into a single text or convert input to string if `stringify` is enabled.\"\"\"\n        # Early return for stringify option\n        if self.mode == \"Stringify\":\n            return self.convert_to_string()\n\n        df, data = self._clean_args()\n\n        lines = []\n        if df is not None:\n            for _, row in df.iterrows():\n                formatted_text = self.pattern.format(**row.to_dict())\n                lines.append(formatted_text)\n        elif data is not None:\n            formatted_text = self.pattern.format(**data.data)\n            lines.append(formatted_text)\n\n        combined_text = self.sep.join(lines)\n        self.status = combined_text\n        return Message(text=combined_text)\n\n    def _safe_convert(self, data: Any) -> str:\n        \"\"\"Safely convert input data to string.\"\"\"\n        try:\n            if isinstance(data, str):\n                return data\n            if isinstance(data, Message):\n                return data.get_text()\n            if isinstance(data, Data):\n                return json.dumps(data.data)\n            if isinstance(data, DataFrame):\n                if hasattr(self, \"clean_data\") and self.clean_data:\n                    # Remove empty rows\n                    data = data.dropna(how=\"all\")\n                    # Remove empty lines in each cell\n                    data = data.replace(r\"^\\s*$\", \"\", regex=True)\n                    # Replace multiple newlines with a single newline\n                    data = data.replace(r\"\\n+\", \"\\n\", regex=True)\n                return data.to_markdown(index=False)\n            return str(data)\n        except (ValueError, TypeError, AttributeError) as e:\n            msg = f\"Error converting data: {e!s}\"\n            raise ValueError(msg) from e\n\n    def convert_to_string(self) -> Message:\n        \"\"\"Convert input data to string with proper error handling.\"\"\"\n        result = \"\"\n        if isinstance(self.input_data, list):\n            result = \"\\n\".join([self._safe_convert(item) for item in self.input_data])\n        else:\n            result = self._safe_convert(self.input_data)\n        self.log(f\"Converted to string with length: {len(result)}\")\n\n        message = Message(text=result)\n        self.status = message\n        return message\n"
              },
              "input_data": {
                "_input_type": "HandleInput",
                "advanced": false,
                "display_name": "Data or DataFrame",
                "dynamic": false,
                "info": "Accepts either a DataFrame or a Data object.",
                "input_types": [
                  "DataFrame",
                  "Data"
                ],
                "list": false,
                "list_add_label": "Add More",
                "name": "input_data",
                "placeholder": "",
                "required": true,
                "show": true,
                "title_case": false,
                "trace_as_metadata": true,
                "type": "other",
                "value": ""
              },
              "mode": {
                "_input_type": "TabInput",
                "advanced": false,
                "display_name": "Mode",
                "dynamic": false,
                "info": "Convert into raw string instead of using a template.",
                "name": "mode",
                "options": [
                  "Parser",
                  "Stringify"
                ],
                "placeholder": "",
                "real_time_refresh": true,
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "tab",
                "value": "Parser"
              },
              "pattern": {
                "_input_type": "MultilineInput",
                "advanced": false,
                "copy_field": false,
                "display_name": "Template",
                "dynamic": true,
                "info": "Use variables within curly brackets to extract column values for DataFrames or key values for Data.For example: `Name: {Name}, Age: {Age}, Country: {Country}`",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "multiline": true,
                "name": "pattern",
                "placeholder": "",
                "required": true,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": "{ts}"
              },
              "sep": {
                "_input_type": "MessageTextInput",
                "advanced": true,
                "display_name": "Separator",
                "dynamic": false,
                "info": "String used to separate rows/items.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "sep",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": "\n"
              }
            },
            "tool_mode": false
          },
          "showNode": true,
          "type": "ParserComponent"
        },
        "dragging": false,
        "id": "ParserComponent-B3sHD",
        "measured": {
          "height": 394,
          "width": 320
        },
        "position": {
          "x": 2929.775435375867,
          "y": 655.5382662133421
        },
        "selected": false,
        "type": "genericNode"
      },
      {
        "data": {
          "id": "Pass-SpImR",
          "node": {
            "base_classes": [
              "Message"
            ],
            "beta": false,
            "conditional_paths": [],
            "custom_fields": {},
            "description": "Forwards the input message, unchanged.",
            "display_name": "Pass",
            "documentation": "",
            "edited": false,
            "field_order": [
              "input_message",
              "ignored_message"
            ],
            "frozen": false,
            "icon": "arrow-right",
            "legacy": false,
            "lf_version": "1.3.4",
            "metadata": {},
            "minimized": false,
            "output_types": [],
            "outputs": [
              {
                "allows_loop": false,
                "cache": true,
                "display_name": "Output Message",
                "hidden": false,
                "method": "pass_message",
                "name": "output_message",
                "selected": "Message",
                "tool_mode": true,
                "types": [
                  "Message"
                ],
                "value": "__UNDEFINED__"
              }
            ],
            "pinned": false,
            "template": {
              "_type": "Component",
              "code": {
                "advanced": true,
                "dynamic": true,
                "fileTypes": [],
                "file_path": "",
                "info": "",
                "list": false,
                "load_from_db": false,
                "multiline": true,
                "name": "code",
                "password": false,
                "placeholder": "",
                "required": true,
                "show": true,
                "title_case": false,
                "type": "code",
                "value": "from langflow.custom import Component\nfrom langflow.io import MessageInput\nfrom langflow.schema.message import Message\nfrom langflow.template import Output\n\n\nclass PassMessageComponent(Component):\n    display_name = \"Pass\"\n    description = \"Forwards the input message, unchanged.\"\n    name = \"Pass\"\n    icon = \"arrow-right\"\n\n    inputs = [\n        MessageInput(\n            name=\"input_message\",\n            display_name=\"Input Message\",\n            info=\"The message to be passed forward.\",\n            required=True,\n        ),\n        MessageInput(\n            name=\"ignored_message\",\n            display_name=\"Ignored Message\",\n            info=\"A second message to be ignored. Used as a workaround for continuity.\",\n            advanced=True,\n        ),\n    ]\n\n    outputs = [\n        Output(display_name=\"Output Message\", name=\"output_message\", method=\"pass_message\"),\n    ]\n\n    def pass_message(self) -> Message:\n        self.status = self.input_message\n        return self.input_message\n"
              },
              "ignored_message": {
                "_input_type": "MessageInput",
                "advanced": false,
                "display_name": "Ignored Message",
                "dynamic": false,
                "info": "A second message to be ignored. Used as a workaround for continuity.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "ignored_message",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "input_message": {
                "_input_type": "MessageInput",
                "advanced": false,
                "display_name": "Input Message",
                "dynamic": false,
                "info": "The message to be passed forward.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "input_message",
                "placeholder": "",
                "required": true,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              }
            },
            "tool_mode": false
          },
          "showNode": true,
          "type": "Pass"
        },
        "dragging": false,
        "id": "Pass-SpImR",
        "measured": {
          "height": 312,
          "width": 320
        },
        "position": {
          "x": 3286.3472356490383,
          "y": 491.8101565345831
        },
        "selected": false,
        "type": "genericNode"
      },
      {
        "data": {
          "id": "SlackCreateConversation-JKXln",
          "node": {
            "base_classes": [
              "Data",
              "Tool"
            ],
            "beta": false,
            "conditional_paths": [],
            "custom_fields": {},
            "description": "Initiates a public or private channel-based conversation.",
            "display_name": "Create Conversation",
            "documentation": "",
            "edited": false,
            "field_order": [
              "oauth_token",
              "conversation_name",
              "team_id",
              "is_private"
            ],
            "frozen": false,
            "icon": "slack",
            "legacy": false,
            "lf_version": "1.3.4",
            "metadata": {},
            "minimized": false,
            "output_types": [],
            "outputs": [
              {
                "allows_loop": false,
                "cache": true,
                "display_name": "Data",
                "hidden": false,
                "method": "build_data",
                "name": "api_build_data",
                "selected": "Data",
                "tool_mode": true,
                "types": [
                  "Data"
                ],
                "value": "__UNDEFINED__"
              },
              {
                "allows_loop": false,
                "cache": true,
                "display_name": "Tool",
                "hidden": true,
                "method": "build_tool",
                "name": "api_build_tool",
                "selected": "Tool",
                "tool_mode": true,
                "types": [
                  "Tool"
                ],
                "value": "__UNDEFINED__"
              }
            ],
            "pinned": false,
            "template": {
              "_type": "Component",
              "code": {
                "advanced": true,
                "dynamic": true,
                "fileTypes": [],
                "file_path": "",
                "info": "",
                "list": false,
                "load_from_db": false,
                "multiline": true,
                "name": "code",
                "password": false,
                "placeholder": "",
                "required": true,
                "show": true,
                "title_case": false,
                "type": "code",
                "value": "from typing import Any\n\nfrom langchain.tools import StructuredTool\nfrom pydantic import BaseModel, Field\n\nfrom langflow.base.slack import (\n    INPUT_DESCRIPTION_IS_PRIVATE,\n    OAuthTokenInput,\n    Component,\n    CreateConversationOptions,\n    DataOutput,\n    IsPrivateInput,\n    IsPrivateMixin,\n    ToolOutput,\n)\nfrom langflow.field_typing import Tool\nfrom langflow.inputs import MessageTextInput\nfrom langflow.schema import Data\n\nDESCRIPTION_COMPONENT = \"Initiates a public or private channel-based conversation.\"\nDESCRIPTION_CONVERSATION_NAME = \"Name of the public or private channel to create.\"\nDESCRIPTION_TEAM_ID = \"Encoded team id to create the channel in, required if org token is used.\"\n\n\nclass SlackCreateConversation(Component, IsPrivateMixin):\n    display_name = \"Create Conversation\"\n    description = DESCRIPTION_COMPONENT\n    name = \"SlackCreateConversation\"\n\n    inputs = [\n        OAuthTokenInput(),\n        MessageTextInput(\n            name=\"conversation_name\",\n            display_name=\"Name\",\n            info=DESCRIPTION_CONVERSATION_NAME\n        ),\n        MessageTextInput(\n            name=\"team_id\",\n            display_name=\"Team ID\",\n            info=DESCRIPTION_TEAM_ID,\n            advanced=True\n        ),\n        IsPrivateInput()\n    ]\n\n    outputs = [\n        DataOutput(),\n        ToolOutput(),\n    ]\n\n\n    class Schema(BaseModel):\n        name: str = Field(..., description=DESCRIPTION_CONVERSATION_NAME)\n        team_id: str | None = Field(None, description=DESCRIPTION_TEAM_ID)\n        is_private: bool | None = Field(None, description=INPUT_DESCRIPTION_IS_PRIVATE)\n\n\n    def _create_schema(self) -> Schema:\n        return self.Schema(\n            name=self.conversation_name,\n            team_id=self.team_id,\n            is_private=self.is_private\n        )\n\n\n    def build_data(self) -> Data:\n        schema = self._create_schema()\n        data = self._create_conversation(schema)\n        return Data(data=data)\n\n\n    def build_tool(self) -> Tool:\n        return StructuredTool.from_function(\n            name=\"slack_create_conversation\",\n            description=DESCRIPTION_COMPONENT,\n            coroutine=self._tool_func,\n            args_schema=self.Schema,\n        )\n\n\n    def _tool_func(self, **kwargs) -> Any:\n        schema = self.Schema(**kwargs)\n        return self._create_conversation(schema)\n\n\n    def _create_conversation(self, schema: Schema) -> Any:\n        client = self._get_client()\n\n        options = CreateConversationOptions(name=schema.name, team_id=schema.team_id, is_private=schema.is_private)\n\n        result, response = client.conversation.create_conversation(options)\n\n        return result\n"
              },
              "conversation_name": {
                "_input_type": "MessageTextInput",
                "advanced": false,
                "display_name": "Name",
                "dynamic": false,
                "info": "Name of the public or private channel to create.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "conversation_name",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "is_private": {
                "_input_type": "IsPrivateInput",
                "advanced": true,
                "display_name": "Is Private",
                "dynamic": false,
                "info": "Create a private channel instead of a public one.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "is_private",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "oauth_token": {
                "_input_type": "OAuthTokenInput",
                "advanced": false,
                "display_name": "Bot User OAuth Token",
                "dynamic": false,
                "info": "OAuth token for the Slack app.",
                "input_types": [],
                "load_from_db": false,
                "name": "oauth_token",
                "password": true,
                "placeholder": "",
                "required": true,
                "show": true,
                "title_case": false,
                "type": "str",
                "value": ""
              },
              "team_id": {
                "_input_type": "MessageTextInput",
                "advanced": true,
                "display_name": "Team ID",
                "dynamic": false,
                "info": "Encoded team id to create the channel in, required if org token is used.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "team_id",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              }
            },
            "tool_mode": false
          },
          "showNode": true,
          "type": "SlackCreateConversation"
        },
        "dragging": false,
        "id": "SlackCreateConversation-JKXln",
        "measured": {
          "height": 332,
          "width": 320
        },
        "position": {
          "x": 445.3846112753385,
          "y": 618.6671282641065
        },
        "selected": false,
        "type": "genericNode"
      },
      {
        "data": {
          "id": "SlackPostMessage-Us7aF",
          "node": {
            "base_classes": [
              "Data",
              "Tool"
            ],
            "beta": false,
            "conditional_paths": [],
            "custom_fields": {},
            "description": "Sends a message to a channel.",
            "display_name": "Post Message",
            "documentation": "",
            "edited": false,
            "field_order": [
              "oauth_token",
              "channel",
              "text"
            ],
            "frozen": false,
            "icon": "slack",
            "legacy": false,
            "lf_version": "1.3.4",
            "metadata": {},
            "minimized": false,
            "output_types": [],
            "outputs": [
              {
                "allows_loop": false,
                "cache": true,
                "display_name": "Data",
                "hidden": false,
                "method": "build_data",
                "name": "api_build_data",
                "selected": "Data",
                "tool_mode": true,
                "types": [
                  "Data"
                ],
                "value": "__UNDEFINED__"
              },
              {
                "allows_loop": false,
                "cache": true,
                "display_name": "Tool",
                "hidden": true,
                "method": "build_tool",
                "name": "api_build_tool",
                "selected": "Tool",
                "tool_mode": true,
                "types": [
                  "Tool"
                ],
                "value": "__UNDEFINED__"
              }
            ],
            "pinned": false,
            "template": {
              "_type": "Component",
              "channel": {
                "_input_type": "MessageTextInput",
                "advanced": false,
                "display_name": "Channel",
                "dynamic": false,
                "info": "Channel ID or name that represents a channel, group, or IM channel to send the message to.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "channel",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "code": {
                "advanced": true,
                "dynamic": true,
                "fileTypes": [],
                "file_path": "",
                "info": "",
                "list": false,
                "load_from_db": false,
                "multiline": true,
                "name": "code",
                "password": false,
                "placeholder": "",
                "required": true,
                "show": true,
                "title_case": false,
                "type": "code",
                "value": "from typing import Any\n\nfrom langchain.tools import StructuredTool\nfrom pydantic import BaseModel, Field\n\nfrom langflow.base.slack import OAuthTokenInput, Component, DataOutput, PostMessageOptions, ToolOutput\nfrom langflow.field_typing import Tool\nfrom langflow.inputs import MessageTextInput\nfrom langflow.schema import Data\n\nDESCRIPTION_COMPONENT = \"Sends a message to a channel.\"\nDESCRIPTION_CHANNEL = \"Channel ID or name that represents a channel, group, or IM channel to send the message to.\"\nDESCRIPTION_TEXT = \"Message text to post.\"\n\n\nclass SlackPostMessage(Component):\n    display_name = \"Post Message\"\n    description = DESCRIPTION_COMPONENT\n    name = \"SlackPostMessage\"\n\n\n    inputs = [\n        OAuthTokenInput(),\n        MessageTextInput(\n            name=\"channel\",\n            display_name=\"Channel\",\n            info=DESCRIPTION_CHANNEL\n        ),\n        MessageTextInput(\n            name=\"text\",\n            display_name=\"Text\",\n            info=DESCRIPTION_TEXT\n        )\n    ]\n\n\n    outputs = [\n        DataOutput(),\n        ToolOutput(),\n    ]\n\n\n    class Schema(BaseModel):\n        channel: str = Field(..., description=DESCRIPTION_CHANNEL)\n        text: str = Field(..., description=DESCRIPTION_TEXT)\n\n\n    def _create_schema(self) -> Schema:\n        return self.Schema(\n            channel=self.channel,\n            text=self.text\n        )\n\n\n    def build_data(self) -> Data:\n        schema = self._create_schema()\n        data = self._post_message(schema)\n        return Data(data=data)\n\n\n    def build_tool(self) -> Tool:\n        return StructuredTool.from_function(\n            name=\"slack_post_message\",\n            description=DESCRIPTION_COMPONENT,\n            coroutine=self._tool_func,\n            args_schema=self.Schema,\n        )\n\n\n    def _tool_func(self, **kwargs) -> Any:\n        schema = self.Schema(**kwargs)\n        return self._post_message(schema)\n\n\n    def _post_message(self, schema: Schema) -> Any:\n        client = self._get_client()\n\n        options = PostMessageOptions(channel=schema.channel, text=schema.text)\n\n        result, response = client.chat.post_message(options)\n\n        return result\n"
              },
              "oauth_token": {
                "_input_type": "OAuthTokenInput",
                "advanced": false,
                "display_name": "Bot User OAuth Token",
                "dynamic": false,
                "info": "OAuth token for the Slack app.",
                "input_types": [],
                "load_from_db": false,
                "name": "oauth_token",
                "password": true,
                "placeholder": "",
                "required": true,
                "show": true,
                "title_case": false,
                "type": "str",
                "value": ""
              },
              "text": {
                "_input_type": "MessageTextInput",
                "advanced": false,
                "display_name": "Text",
                "dynamic": false,
                "info": "Message text to post.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "text",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              }
            },
            "tool_mode": false
          },
          "showNode": true,
          "type": "SlackPostMessage"
        },
        "dragging": false,
        "id": "SlackPostMessage-Us7aF",
        "measured": {
          "height": 395,
          "width": 320
        },
        "position": {
          "x": 2219.0358294646617,
          "y": 658.449959326297
        },
        "selected": false,
        "type": "genericNode"
      },
      {
        "data": {
          "id": "SlackPinMessage-LT0lf",
          "node": {
            "base_classes": [
              "Data",
              "Tool"
            ],
            "beta": false,
            "conditional_paths": [],
            "custom_fields": {},
            "description": "Pins an item to a channel.",
            "display_name": "Pin Message",
            "documentation": "",
            "edited": false,
            "field_order": [
              "oauth_token",
              "channel",
              "timestamp"
            ],
            "frozen": false,
            "icon": "slack",
            "legacy": false,
            "lf_version": "1.3.4",
            "metadata": {},
            "minimized": false,
            "output_types": [],
            "outputs": [
              {
                "allows_loop": false,
                "cache": true,
                "display_name": "Data",
                "method": "build_data",
                "name": "api_build_data",
                "selected": "Data",
                "tool_mode": true,
                "types": [
                  "Data"
                ],
                "value": "__UNDEFINED__"
              },
              {
                "allows_loop": false,
                "cache": true,
                "display_name": "Tool",
                "hidden": true,
                "method": "build_tool",
                "name": "api_build_tool",
                "selected": "Tool",
                "tool_mode": true,
                "types": [
                  "Tool"
                ],
                "value": "__UNDEFINED__"
              }
            ],
            "pinned": false,
            "template": {
              "_type": "Component",
              "channel": {
                "_input_type": "MessageTextInput",
                "advanced": false,
                "display_name": "Channel ID",
                "dynamic": false,
                "info": "Channel to pin the message to.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "channel",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "code": {
                "advanced": true,
                "dynamic": true,
                "fileTypes": [],
                "file_path": "",
                "info": "",
                "list": false,
                "load_from_db": false,
                "multiline": true,
                "name": "code",
                "password": false,
                "placeholder": "",
                "required": true,
                "show": true,
                "title_case": false,
                "type": "code",
                "value": "from typing import Any\n\nfrom langchain.tools import StructuredTool\nfrom pydantic import BaseModel, Field\n\nfrom langflow.base.slack import (\n    OAuthTokenInput,\n    Component,\n    DataOutput,\n    PinOptions,\n    ToolOutput,\n)\nfrom langflow.field_typing import Tool\nfrom langflow.inputs import MessageTextInput\nfrom langflow.schema import Data\n\nDESCRIPTION_COMPONENT = \"Pins an item to a channel.\"\nDESCRIPTION_CHANNEL = \"Channel to pin the message to.\"\nDESCRIPTION_TIMESTAMP = \"Timestamp of the message to pin.\"\n\n\nclass SlackPinMessage(Component):\n    display_name = \"Pin Message\"\n    description = DESCRIPTION_COMPONENT\n    name = \"SlackPinMessage\"\n\n    inputs = [\n        OAuthTokenInput(),\n        MessageTextInput(\n            name=\"channel\",\n            display_name=\"Channel ID\",\n            info=DESCRIPTION_CHANNEL\n        ),\n        MessageTextInput(\n            name=\"timestamp\",\n            display_name=\"Timestamp\",\n            info=DESCRIPTION_TIMESTAMP\n        ),\n    ]\n\n\n    outputs = [\n        DataOutput(),\n        ToolOutput(),\n    ]\n\n\n    class Schema(BaseModel):\n        channel: str = Field(..., description=DESCRIPTION_CHANNEL)\n        timestamp: str = Field(..., description=DESCRIPTION_TIMESTAMP)\n\n\n    def _create_schema(self) -> Schema:\n        return self.Schema(\n            channel=self.channel,\n            timestamp=self.timestamp\n        )\n\n\n    def build_data(self) -> Data:\n        schema = self._create_schema()\n        data = self._pin(schema)\n        return Data(data=data)\n\n\n    def build_tool(self) -> Tool:\n        return StructuredTool.from_function(\n            name=\"slack_pin\",\n            description=DESCRIPTION_COMPONENT,\n            coroutine=self._tool_func,\n            args_schema=self.Schema,\n        )\n\n\n    def _tool_func(self, **kwargs) -> Any:\n        schema = self.Schema(**kwargs)\n        return self._pin(schema)\n\n\n    def _pin(self, schema: Schema) -> Any:\n        client = self._get_client()\n\n        options = PinOptions(channel=schema.channel, timestamp=schema.timestamp)\n\n        result, response = client.pin.pin(options)\n\n        return result\n"
              },
              "oauth_token": {
                "_input_type": "OAuthTokenInput",
                "advanced": false,
                "display_name": "Bot User OAuth Token",
                "dynamic": false,
                "info": "OAuth token for the Slack app.",
                "input_types": [],
                "load_from_db": false,
                "name": "oauth_token",
                "password": true,
                "placeholder": "",
                "required": true,
                "show": true,
                "title_case": false,
                "type": "str",
                "value": ""
              },
              "timestamp": {
                "_input_type": "MessageTextInput",
                "advanced": false,
                "display_name": "Timestamp",
                "dynamic": false,
                "info": "Timestamp of the message to pin.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "timestamp",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              }
            },
            "tool_mode": false
          },
          "showNode": true,
          "type": "SlackPinMessage"
        },
        "dragging": false,
        "id": "SlackPinMessage-LT0lf",
        "measured": {
          "height": 395,
          "width": 320
        },
        "position": {
          "x": 3289.857032221954,
          "y": 920.3535971523838
        },
        "selected": false,
        "type": "genericNode"
      }
    ],
    "viewport": {
      "x": 310.1421563728902,
      "y": 261.49410513451227,
      "zoom": 0.30883691595585566
    }
  },
  "description": "This template creates public DocSpace room and a corresponding Slack channel with provided name. Then sends a message to created Slack channel with link to the room and pins it.",
  "endpoint_name": null,
  "id": "814e6ae4-27dc-44e5-a349-90316987d3af",
  "is_component": false,
  "last_tested_version": "1.3.4",
  "name": "Create DocSpace room and Slack channel",
  "tags": []
}