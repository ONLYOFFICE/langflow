{
  "data": {
    "edges": [
      {
        "animated": false,
        "className": "",
        "data": {
          "sourceHandle": {
            "dataType": "TextInput",
            "id": "TextInput-qO0hZ",
            "name": "text",
            "output_types": ["Message"]
          },
          "targetHandle": {
            "fieldName": "file_id",
            "id": "OnlyofficeDocspaceGetFile-9XpHi",
            "inputTypes": ["Message"],
            "type": "str"
          }
        },
        "id": "xy-edge__TextInput-qO0hZ{œdataTypeœ:œTextInputœ,œidœ:œTextInput-qO0hZœ,œnameœ:œtextœ,œoutput_typesœ:[œMessageœ]}-OnlyofficeDocspaceGetFile-9XpHi{œfieldNameœ:œfile_idœ,œidœ:œOnlyofficeDocspaceGetFile-9XpHiœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
        "selected": false,
        "source": "TextInput-qO0hZ",
        "sourceHandle": "{œdataTypeœ:œTextInputœ,œidœ:œTextInput-qO0hZœ,œnameœ:œtextœ,œoutput_typesœ:[œMessageœ]}",
        "target": "OnlyofficeDocspaceGetFile-9XpHi",
        "targetHandle": "{œfieldNameœ:œfile_idœ,œidœ:œOnlyofficeDocspaceGetFile-9XpHiœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}"
      },
      {
        "animated": false,
        "className": "",
        "data": {
          "sourceHandle": {
            "dataType": "OnlyofficeDocspaceGetFile",
            "id": "OnlyofficeDocspaceGetFile-9XpHi",
            "name": "api_build_data",
            "output_types": ["Data"]
          },
          "targetHandle": {
            "fieldName": "input_data",
            "id": "ParserComponent-IPomb",
            "inputTypes": ["DataFrame", "Data"],
            "type": "other"
          }
        },
        "id": "xy-edge__OnlyofficeDocspaceGetFile-9XpHi{œdataTypeœ:œOnlyofficeDocspaceGetFileœ,œidœ:œOnlyofficeDocspaceGetFile-9XpHiœ,œnameœ:œapi_build_dataœ,œoutput_typesœ:[œDataœ]}-ParserComponent-IPomb{œfieldNameœ:œinput_dataœ,œidœ:œParserComponent-IPombœ,œinputTypesœ:[œDataFrameœ,œDataœ],œtypeœ:œotherœ}",
        "selected": false,
        "source": "OnlyofficeDocspaceGetFile-9XpHi",
        "sourceHandle": "{œdataTypeœ:œOnlyofficeDocspaceGetFileœ,œidœ:œOnlyofficeDocspaceGetFile-9XpHiœ,œnameœ:œapi_build_dataœ,œoutput_typesœ:[œDataœ]}",
        "target": "ParserComponent-IPomb",
        "targetHandle": "{œfieldNameœ:œinput_dataœ,œidœ:œParserComponent-IPombœ,œinputTypesœ:[œDataFrameœ,œDataœ],œtypeœ:œotherœ}"
      },
      {
        "animated": false,
        "className": "",
        "data": {
          "sourceHandle": {
            "dataType": "ParserComponent",
            "id": "ParserComponent-IPomb",
            "name": "parsed_text",
            "output_types": ["Message"]
          },
          "targetHandle": {
            "fieldName": "collection_name",
            "id": "QdrantCheckFileComponent-E8DyR",
            "inputTypes": ["Message"],
            "type": "str"
          }
        },
        "id": "xy-edge__ParserComponent-IPomb{œdataTypeœ:œParserComponentœ,œidœ:œParserComponent-IPombœ,œnameœ:œparsed_textœ,œoutput_typesœ:[œMessageœ]}-QdrantCheckFileComponent-E8DyR{œfieldNameœ:œcollection_nameœ,œidœ:œQdrantCheckFileComponent-E8DyRœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
        "selected": false,
        "source": "ParserComponent-IPomb",
        "sourceHandle": "{œdataTypeœ:œParserComponentœ,œidœ:œParserComponent-IPombœ,œnameœ:œparsed_textœ,œoutput_typesœ:[œMessageœ]}",
        "target": "QdrantCheckFileComponent-E8DyR",
        "targetHandle": "{œfieldNameœ:œcollection_nameœ,œidœ:œQdrantCheckFileComponent-E8DyRœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}"
      },
      {
        "animated": false,
        "className": "",
        "data": {
          "sourceHandle": {
            "dataType": "OnlyofficeDocspaceGetFile",
            "id": "OnlyofficeDocspaceGetFile-9XpHi",
            "name": "api_build_data",
            "output_types": ["Data"]
          },
          "targetHandle": {
            "fieldName": "metadata",
            "id": "QdrantCheckFileComponent-E8DyR",
            "inputTypes": ["Data"],
            "type": "other"
          }
        },
        "id": "xy-edge__OnlyofficeDocspaceGetFile-9XpHi{œdataTypeœ:œOnlyofficeDocspaceGetFileœ,œidœ:œOnlyofficeDocspaceGetFile-9XpHiœ,œnameœ:œapi_build_dataœ,œoutput_typesœ:[œDataœ]}-QdrantCheckFileComponent-E8DyR{œfieldNameœ:œmetadataœ,œidœ:œQdrantCheckFileComponent-E8DyRœ,œinputTypesœ:[œDataœ],œtypeœ:œotherœ}",
        "selected": false,
        "source": "OnlyofficeDocspaceGetFile-9XpHi",
        "sourceHandle": "{œdataTypeœ:œOnlyofficeDocspaceGetFileœ,œidœ:œOnlyofficeDocspaceGetFile-9XpHiœ,œnameœ:œapi_build_dataœ,œoutput_typesœ:[œDataœ]}",
        "target": "QdrantCheckFileComponent-E8DyR",
        "targetHandle": "{œfieldNameœ:œmetadataœ,œidœ:œQdrantCheckFileComponent-E8DyRœ,œinputTypesœ:[œDataœ],œtypeœ:œotherœ}"
      },
      {
        "animated": false,
        "className": "",
        "data": {
          "sourceHandle": {
            "dataType": "QdrantCheckFileComponent",
            "id": "QdrantCheckFileComponent-E8DyR",
            "name": "check",
            "output_types": ["Message"]
          },
          "targetHandle": {
            "fieldName": "input_value",
            "id": "ChatOutput-wDHxo",
            "inputTypes": ["Data", "DataFrame", "Message"],
            "type": "other"
          }
        },
        "id": "xy-edge__QdrantCheckFileComponent-E8DyR{œdataTypeœ:œQdrantCheckFileComponentœ,œidœ:œQdrantCheckFileComponent-E8DyRœ,œnameœ:œcheckœ,œoutput_typesœ:[œMessageœ]}-ChatOutput-wDHxo{œfieldNameœ:œinput_valueœ,œidœ:œChatOutput-wDHxoœ,œinputTypesœ:[œDataœ,œDataFrameœ,œMessageœ],œtypeœ:œotherœ}",
        "selected": false,
        "source": "QdrantCheckFileComponent-E8DyR",
        "sourceHandle": "{œdataTypeœ:œQdrantCheckFileComponentœ,œidœ:œQdrantCheckFileComponent-E8DyRœ,œnameœ:œcheckœ,œoutput_typesœ:[œMessageœ]}",
        "target": "ChatOutput-wDHxo",
        "targetHandle": "{œfieldNameœ:œinput_valueœ,œidœ:œChatOutput-wDHxoœ,œinputTypesœ:[œDataœ,œDataFrameœ,œMessageœ],œtypeœ:œotherœ}"
      },
      {
        "animated": false,
        "className": "",
        "data": {
          "sourceHandle": {
            "dataType": "DocSpaceAIEmbeddings",
            "id": "DocSpaceAIEmbeddings-HKUk2",
            "name": "embeddings",
            "output_types": ["Embeddings"]
          },
          "targetHandle": {
            "fieldName": "embedding",
            "id": "QdrantCheckFileComponent-E8DyR",
            "inputTypes": ["Embeddings"],
            "type": "other"
          }
        },
        "id": "xy-edge__DocSpaceAIEmbeddings-HKUk2{œdataTypeœ:œDocSpaceAIEmbeddingsœ,œidœ:œDocSpaceAIEmbeddings-HKUk2œ,œnameœ:œembeddingsœ,œoutput_typesœ:[œEmbeddingsœ]}-QdrantCheckFileComponent-E8DyR{œfieldNameœ:œembeddingœ,œidœ:œQdrantCheckFileComponent-E8DyRœ,œinputTypesœ:[œEmbeddingsœ],œtypeœ:œotherœ}",
        "selected": false,
        "source": "DocSpaceAIEmbeddings-HKUk2",
        "sourceHandle": "{œdataTypeœ:œDocSpaceAIEmbeddingsœ,œidœ:œDocSpaceAIEmbeddings-HKUk2œ,œnameœ:œembeddingsœ,œoutput_typesœ:[œEmbeddingsœ]}",
        "target": "QdrantCheckFileComponent-E8DyR",
        "targetHandle": "{œfieldNameœ:œembeddingœ,œidœ:œQdrantCheckFileComponent-E8DyRœ,œinputTypesœ:[œEmbeddingsœ],œtypeœ:œotherœ}"
      }
    ],
    "nodes": [
      {
        "data": {
          "id": "TextInput-qO0hZ",
          "node": {
            "base_classes": ["Message"],
            "beta": false,
            "conditional_paths": [],
            "custom_fields": {},
            "description": "Get text inputs from the Playground.",
            "display_name": "Text Input",
            "documentation": "",
            "edited": false,
            "field_order": ["input_value"],
            "frozen": false,
            "icon": "type",
            "legacy": false,
            "lf_version": "1.4.1",
            "metadata": {},
            "minimized": false,
            "output_types": [],
            "outputs": [
              {
                "allows_loop": false,
                "cache": true,
                "display_name": "Message",
                "hidden": false,
                "method": "text_response",
                "name": "text",
                "selected": "Message",
                "tool_mode": true,
                "types": ["Message"],
                "value": "__UNDEFINED__"
              }
            ],
            "pinned": false,
            "template": {
              "_type": "Component",
              "code": {
                "advanced": true,
                "dynamic": true,
                "fileTypes": [],
                "file_path": "",
                "info": "",
                "list": false,
                "load_from_db": false,
                "multiline": true,
                "name": "code",
                "password": false,
                "placeholder": "",
                "required": true,
                "show": true,
                "title_case": false,
                "type": "code",
                "value": "from langflow.base.io.text import TextComponent\nfrom langflow.io import MultilineInput, Output\nfrom langflow.schema.message import Message\n\n\nclass TextInputComponent(TextComponent):\n    display_name = \"Text Input\"\n    description = \"Get text inputs from the Playground.\"\n    icon = \"type\"\n    name = \"TextInput\"\n\n    inputs = [\n        MultilineInput(\n            name=\"input_value\",\n            display_name=\"Text\",\n            info=\"Text to be passed as input.\",\n        ),\n    ]\n    outputs = [\n        Output(display_name=\"Message\", name=\"text\", method=\"text_response\"),\n    ]\n\n    def text_response(self) -> Message:\n        return Message(\n            text=self.input_value,\n        )\n"
              },
              "input_value": {
                "_input_type": "MultilineInput",
                "advanced": false,
                "copy_field": false,
                "display_name": "Text",
                "dynamic": false,
                "info": "Text to be passed as input.",
                "input_types": ["Message"],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "multiline": true,
                "name": "input_value",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              }
            },
            "tool_mode": false
          },
          "showNode": true,
          "type": "TextInput"
        },
        "dragging": false,
        "id": "TextInput-qO0hZ",
        "measured": {
          "height": 229,
          "width": 320
        },
        "position": {
          "x": 548.9999999999999,
          "y": 921.0634013471347
        },
        "selected": false,
        "type": "genericNode"
      },
      {
        "data": {
          "id": "ChatOutput-wDHxo",
          "node": {
            "base_classes": ["Message"],
            "beta": false,
            "conditional_paths": [],
            "custom_fields": {},
            "description": "Display a chat message in the Playground.",
            "display_name": "Chat Output",
            "documentation": "",
            "edited": false,
            "field_order": [
              "input_value",
              "should_store_message",
              "sender",
              "sender_name",
              "session_id",
              "data_template",
              "background_color",
              "chat_icon",
              "text_color",
              "clean_data"
            ],
            "frozen": false,
            "icon": "MessagesSquare",
            "legacy": false,
            "lf_version": "1.3.2",
            "metadata": {},
            "minimized": true,
            "output_types": [],
            "outputs": [
              {
                "allows_loop": false,
                "cache": true,
                "display_name": "Message",
                "method": "message_response",
                "name": "message",
                "selected": "Message",
                "tool_mode": true,
                "types": ["Message"],
                "value": "__UNDEFINED__"
              }
            ],
            "pinned": false,
            "template": {
              "_type": "Component",
              "background_color": {
                "_input_type": "MessageTextInput",
                "advanced": true,
                "display_name": "Background Color",
                "dynamic": false,
                "info": "The background color of the icon.",
                "input_types": ["Message"],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "background_color",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "chat_icon": {
                "_input_type": "MessageTextInput",
                "advanced": true,
                "display_name": "Icon",
                "dynamic": false,
                "info": "The icon of the message.",
                "input_types": ["Message"],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "chat_icon",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "clean_data": {
                "_input_type": "BoolInput",
                "advanced": true,
                "display_name": "Basic Clean Data",
                "dynamic": false,
                "info": "Whether to clean the data",
                "list": false,
                "list_add_label": "Add More",
                "name": "clean_data",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "bool",
                "value": true
              },
              "code": {
                "advanced": true,
                "dynamic": true,
                "fileTypes": [],
                "file_path": "",
                "info": "",
                "list": false,
                "load_from_db": false,
                "multiline": true,
                "name": "code",
                "password": false,
                "placeholder": "",
                "required": true,
                "show": true,
                "title_case": false,
                "type": "code",
                "value": "from collections.abc import Generator\nfrom typing import Any\n\nfrom langflow.base.io.chat import ChatComponent\nfrom langflow.inputs import BoolInput\nfrom langflow.inputs.inputs import HandleInput\nfrom langflow.io import DropdownInput, MessageTextInput, Output\nfrom langflow.schema.data import Data\nfrom langflow.schema.dataframe import DataFrame\nfrom langflow.schema.message import Message\nfrom langflow.schema.properties import Source\nfrom langflow.utils.constants import (\n    MESSAGE_SENDER_AI,\n    MESSAGE_SENDER_NAME_AI,\n    MESSAGE_SENDER_USER,\n)\n\n\nclass ChatOutput(ChatComponent):\n    display_name = \"Chat Output\"\n    description = \"Display a chat message in the Playground.\"\n    icon = \"MessagesSquare\"\n    name = \"ChatOutput\"\n    minimized = True\n\n    inputs = [\n        HandleInput(\n            name=\"input_value\",\n            display_name=\"Text\",\n            info=\"Message to be passed as output.\",\n            input_types=[\"Data\", \"DataFrame\", \"Message\"],\n            required=True,\n        ),\n        BoolInput(\n            name=\"should_store_message\",\n            display_name=\"Store Messages\",\n            info=\"Store the message in the history.\",\n            value=True,\n            advanced=True,\n        ),\n        DropdownInput(\n            name=\"sender\",\n            display_name=\"Sender Type\",\n            options=[MESSAGE_SENDER_AI, MESSAGE_SENDER_USER],\n            value=MESSAGE_SENDER_AI,\n            advanced=True,\n            info=\"Type of sender.\",\n        ),\n        MessageTextInput(\n            name=\"sender_name\",\n            display_name=\"Sender Name\",\n            info=\"Name of the sender.\",\n            value=MESSAGE_SENDER_NAME_AI,\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"session_id\",\n            display_name=\"Session ID\",\n            info=\"The session ID of the chat. If empty, the current session ID parameter will be used.\",\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"data_template\",\n            display_name=\"Data Template\",\n            value=\"{text}\",\n            advanced=True,\n            info=\"Template to convert Data to Text. If left empty, it will be dynamically set to the Data's text key.\",\n        ),\n        MessageTextInput(\n            name=\"background_color\",\n            display_name=\"Background Color\",\n            info=\"The background color of the icon.\",\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"chat_icon\",\n            display_name=\"Icon\",\n            info=\"The icon of the message.\",\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"text_color\",\n            display_name=\"Text Color\",\n            info=\"The text color of the name\",\n            advanced=True,\n        ),\n        BoolInput(\n            name=\"clean_data\",\n            display_name=\"Basic Clean Data\",\n            value=True,\n            info=\"Whether to clean the data\",\n            advanced=True,\n        ),\n    ]\n    outputs = [\n        Output(\n            display_name=\"Message\",\n            name=\"message\",\n            method=\"message_response\",\n        ),\n    ]\n\n    def _build_source(self, id_: str | None, display_name: str | None, source: str | None) -> Source:\n        source_dict = {}\n        if id_:\n            source_dict[\"id\"] = id_\n        if display_name:\n            source_dict[\"display_name\"] = display_name\n        if source:\n            # Handle case where source is a ChatOpenAI object\n            if hasattr(source, \"model_name\"):\n                source_dict[\"source\"] = source.model_name\n            elif hasattr(source, \"model\"):\n                source_dict[\"source\"] = str(source.model)\n            else:\n                source_dict[\"source\"] = str(source)\n        return Source(**source_dict)\n\n    async def message_response(self) -> Message:\n        # First convert the input to string if needed\n        text = self.convert_to_string()\n        # Get source properties\n        source, icon, display_name, source_id = self.get_properties_from_source_component()\n        background_color = self.background_color\n        text_color = self.text_color\n        if self.chat_icon:\n            icon = self.chat_icon\n\n        # Create or use existing Message object\n        if isinstance(self.input_value, Message):\n            message = self.input_value\n            # Update message properties\n            message.text = text\n        else:\n            message = Message(text=text)\n\n        # Set message properties\n        message.sender = self.sender\n        message.sender_name = self.sender_name\n        message.session_id = self.session_id\n        message.flow_id = self.graph.flow_id if hasattr(self, \"graph\") else None\n        message.properties.source = self._build_source(source_id, display_name, source)\n        message.properties.icon = icon\n        message.properties.background_color = background_color\n        message.properties.text_color = text_color\n\n        # Store message if needed\n        if self.session_id and self.should_store_message:\n            stored_message = await self.send_message(message)\n            self.message.value = stored_message\n            message = stored_message\n\n        self.status = message\n        return message\n\n    def _validate_input(self) -> None:\n        \"\"\"Validate the input data and raise ValueError if invalid.\"\"\"\n        if self.input_value is None:\n            msg = \"Input data cannot be None\"\n            raise ValueError(msg)\n        if isinstance(self.input_value, list) and not all(\n            isinstance(item, Message | Data | DataFrame | str) for item in self.input_value\n        ):\n            invalid_types = [\n                type(item).__name__\n                for item in self.input_value\n                if not isinstance(item, Message | Data | DataFrame | str)\n            ]\n            msg = f\"Expected Data or DataFrame or Message or str, got {invalid_types}\"\n            raise TypeError(msg)\n        if not isinstance(\n            self.input_value,\n            Message | Data | DataFrame | str | list | Generator | type(None),\n        ):\n            type_name = type(self.input_value).__name__\n            msg = f\"Expected Data or DataFrame or Message or str, Generator or None, got {type_name}\"\n            raise TypeError(msg)\n\n    def _safe_convert(self, data: Any) -> str:\n        \"\"\"Safely convert input data to string.\"\"\"\n        try:\n            if isinstance(data, str):\n                return data\n            if isinstance(data, Message):\n                return data.get_text()\n            if isinstance(data, Data):\n                if data.get_text() is None:\n                    msg = \"Empty Data object\"\n                    raise ValueError(msg)\n                return data.get_text()\n            if isinstance(data, DataFrame):\n                if self.clean_data:\n                    # Remove empty rows\n                    data = data.dropna(how=\"all\")\n                    # Remove empty lines in each cell\n                    data = data.replace(r\"^\\s*$\", \"\", regex=True)\n                    # Replace multiple newlines with a single newline\n                    data = data.replace(r\"\\n+\", \"\\n\", regex=True)\n\n                # Replace pipe characters to avoid markdown table issues\n                processed_data = data.replace(r\"\\|\", r\"\\\\|\", regex=True)\n\n                processed_data = processed_data.map(\n                    lambda x: str(x).replace(\"\\n\", \"<br/>\") if isinstance(x, str) else x\n                )\n\n                return processed_data.to_markdown(index=False)\n            return str(data)\n        except (ValueError, TypeError, AttributeError) as e:\n            msg = f\"Error converting data: {e!s}\"\n            raise ValueError(msg) from e\n\n    def convert_to_string(self) -> str | Generator[Any, None, None]:\n        \"\"\"Convert input data to string with proper error handling.\"\"\"\n        self._validate_input()\n        if isinstance(self.input_value, list):\n            return \"\\n\".join([self._safe_convert(item) for item in self.input_value])\n        if isinstance(self.input_value, Generator):\n            return self.input_value\n        return self._safe_convert(self.input_value)\n"
              },
              "data_template": {
                "_input_type": "MessageTextInput",
                "advanced": true,
                "display_name": "Data Template",
                "dynamic": false,
                "info": "Template to convert Data to Text. If left empty, it will be dynamically set to the Data's text key.",
                "input_types": ["Message"],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "data_template",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": "{text}"
              },
              "input_value": {
                "_input_type": "HandleInput",
                "advanced": false,
                "display_name": "Text",
                "dynamic": false,
                "info": "Message to be passed as output.",
                "input_types": ["Data", "DataFrame", "Message"],
                "list": false,
                "list_add_label": "Add More",
                "name": "input_value",
                "placeholder": "",
                "required": true,
                "show": true,
                "title_case": false,
                "trace_as_metadata": true,
                "type": "other",
                "value": ""
              },
              "sender": {
                "_input_type": "DropdownInput",
                "advanced": true,
                "combobox": false,
                "dialog_inputs": {},
                "display_name": "Sender Type",
                "dynamic": false,
                "info": "Type of sender.",
                "name": "sender",
                "options": ["Machine", "User"],
                "options_metadata": [],
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "str",
                "value": "Machine"
              },
              "sender_name": {
                "_input_type": "MessageTextInput",
                "advanced": true,
                "display_name": "Sender Name",
                "dynamic": false,
                "info": "Name of the sender.",
                "input_types": ["Message"],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "sender_name",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": "AI"
              },
              "session_id": {
                "_input_type": "MessageTextInput",
                "advanced": true,
                "display_name": "Session ID",
                "dynamic": false,
                "info": "The session ID of the chat. If empty, the current session ID parameter will be used.",
                "input_types": ["Message"],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "session_id",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "should_store_message": {
                "_input_type": "BoolInput",
                "advanced": true,
                "display_name": "Store Messages",
                "dynamic": false,
                "info": "Store the message in the history.",
                "list": false,
                "list_add_label": "Add More",
                "name": "should_store_message",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "bool",
                "value": true
              },
              "text_color": {
                "_input_type": "MessageTextInput",
                "advanced": true,
                "display_name": "Text Color",
                "dynamic": false,
                "info": "The text color of the name",
                "input_types": ["Message"],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "text_color",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              }
            },
            "tool_mode": false
          },
          "showNode": false,
          "type": "ChatOutput"
        },
        "dragging": false,
        "id": "ChatOutput-wDHxo",
        "measured": {
          "height": 66,
          "width": 192
        },
        "position": {
          "x": 2707.845516478487,
          "y": 1108.7797994649095
        },
        "selected": false,
        "type": "genericNode"
      },
      {
        "data": {
          "id": "ParserComponent-IPomb",
          "node": {
            "base_classes": ["Message"],
            "beta": false,
            "conditional_paths": [],
            "custom_fields": {},
            "description": "Format a DataFrame or Data object into text using a template. Enable 'Stringify' to convert input into a readable string instead.",
            "display_name": "Parser",
            "documentation": "",
            "edited": false,
            "field_order": ["mode", "pattern", "input_data", "sep"],
            "frozen": false,
            "icon": "braces",
            "legacy": false,
            "lf_version": "1.4.1",
            "metadata": {},
            "minimized": false,
            "output_types": [],
            "outputs": [
              {
                "allows_loop": false,
                "cache": true,
                "display_name": "Parsed Text",
                "hidden": false,
                "method": "parse_combined_text",
                "name": "parsed_text",
                "selected": "Message",
                "tool_mode": true,
                "types": ["Message"],
                "value": "__UNDEFINED__"
              }
            ],
            "pinned": false,
            "template": {
              "_type": "Component",
              "clean_data": {
                "_input_type": "BoolInput",
                "advanced": true,
                "display_name": "Clean Data",
                "dynamic": false,
                "info": "Enable to clean the data by removing empty rows and lines in each cell of the DataFrame/ Data object.",
                "list": false,
                "list_add_label": "Add More",
                "name": "clean_data",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "bool",
                "value": true
              },
              "code": {
                "advanced": true,
                "dynamic": true,
                "fileTypes": [],
                "file_path": "",
                "info": "",
                "list": false,
                "load_from_db": false,
                "multiline": true,
                "name": "code",
                "password": false,
                "placeholder": "",
                "required": true,
                "show": true,
                "title_case": false,
                "type": "code",
                "value": "import json\nfrom typing import Any\n\nfrom langflow.custom import Component\nfrom langflow.io import (\n    BoolInput,\n    HandleInput,\n    MessageTextInput,\n    MultilineInput,\n    Output,\n    TabInput,\n)\nfrom langflow.schema import Data, DataFrame\nfrom langflow.schema.message import Message\n\n\nclass ParserComponent(Component):\n    display_name = \"Parser\"\n    description = (\n        \"Format a DataFrame or Data object into text using a template. \"\n        \"Enable 'Stringify' to convert input into a readable string instead.\"\n    )\n    icon = \"braces\"\n\n    inputs = [\n        TabInput(\n            name=\"mode\",\n            display_name=\"Mode\",\n            options=[\"Parser\", \"Stringify\"],\n            value=\"Parser\",\n            info=\"Convert into raw string instead of using a template.\",\n            real_time_refresh=True,\n        ),\n        MultilineInput(\n            name=\"pattern\",\n            display_name=\"Template\",\n            info=(\n                \"Use variables within curly brackets to extract column values for DataFrames \"\n                \"or key values for Data.\"\n                \"For example: `Name: {Name}, Age: {Age}, Country: {Country}`\"\n            ),\n            value=\"Text: {text}\",  # Example default\n            dynamic=True,\n            show=True,\n            required=True,\n        ),\n        HandleInput(\n            name=\"input_data\",\n            display_name=\"Data or DataFrame\",\n            input_types=[\"DataFrame\", \"Data\"],\n            info=\"Accepts either a DataFrame or a Data object.\",\n            required=True,\n        ),\n        MessageTextInput(\n            name=\"sep\",\n            display_name=\"Separator\",\n            advanced=True,\n            value=\"\\n\",\n            info=\"String used to separate rows/items.\",\n        ),\n    ]\n\n    outputs = [\n        Output(\n            display_name=\"Parsed Text\",\n            name=\"parsed_text\",\n            info=\"Formatted text output.\",\n            method=\"parse_combined_text\",\n        ),\n    ]\n\n    def update_build_config(self, build_config, field_value, field_name=None):\n        \"\"\"Dynamically hide/show `template` and enforce requirement based on `stringify`.\"\"\"\n        if field_name == \"mode\":\n            build_config[\"pattern\"][\"show\"] = self.mode == \"Parser\"\n            build_config[\"pattern\"][\"required\"] = self.mode == \"Parser\"\n            if field_value:\n                clean_data = BoolInput(\n                    name=\"clean_data\",\n                    display_name=\"Clean Data\",\n                    info=(\n                        \"Enable to clean the data by removing empty rows and lines \"\n                        \"in each cell of the DataFrame/ Data object.\"\n                    ),\n                    value=True,\n                    advanced=True,\n                    required=False,\n                )\n                build_config[\"clean_data\"] = clean_data.to_dict()\n            else:\n                build_config.pop(\"clean_data\", None)\n\n        return build_config\n\n    def _clean_args(self):\n        \"\"\"Prepare arguments based on input type.\"\"\"\n        input_data = self.input_data\n\n        match input_data:\n            case list() if all(isinstance(item, Data) for item in input_data):\n                msg = \"List of Data objects is not supported.\"\n                raise ValueError(msg)\n            case DataFrame():\n                return input_data, None\n            case Data():\n                return None, input_data\n            case dict() if \"data\" in input_data:\n                try:\n                    if \"columns\" in input_data:  # Likely a DataFrame\n                        return DataFrame.from_dict(input_data), None\n                    # Likely a Data object\n                    return None, Data(**input_data)\n                except (TypeError, ValueError, KeyError) as e:\n                    msg = f\"Invalid structured input provided: {e!s}\"\n                    raise ValueError(msg) from e\n            case _:\n                msg = f\"Unsupported input type: {type(input_data)}. Expected DataFrame or Data.\"\n                raise ValueError(msg)\n\n    def parse_combined_text(self) -> Message:\n        \"\"\"Parse all rows/items into a single text or convert input to string if `stringify` is enabled.\"\"\"\n        # Early return for stringify option\n        if self.mode == \"Stringify\":\n            return self.convert_to_string()\n\n        df, data = self._clean_args()\n\n        lines = []\n        if df is not None:\n            for _, row in df.iterrows():\n                formatted_text = self.pattern.format(**row.to_dict())\n                lines.append(formatted_text)\n        elif data is not None:\n            formatted_text = self.pattern.format(**data.data)\n            lines.append(formatted_text)\n\n        combined_text = self.sep.join(lines)\n        self.status = combined_text\n        return Message(text=combined_text)\n\n    def _safe_convert(self, data: Any) -> str:\n        \"\"\"Safely convert input data to string.\"\"\"\n        try:\n            if isinstance(data, str):\n                return data\n            if isinstance(data, Message):\n                return data.get_text()\n            if isinstance(data, Data):\n                return json.dumps(data.data)\n            if isinstance(data, DataFrame):\n                if hasattr(self, \"clean_data\") and self.clean_data:\n                    # Remove empty rows\n                    data = data.dropna(how=\"all\")\n                    # Remove empty lines in each cell\n                    data = data.replace(r\"^\\s*$\", \"\", regex=True)\n                    # Replace multiple newlines with a single newline\n                    data = data.replace(r\"\\n+\", \"\\n\", regex=True)\n                return data.to_markdown(index=False)\n            return str(data)\n        except (ValueError, TypeError, AttributeError) as e:\n            msg = f\"Error converting data: {e!s}\"\n            raise ValueError(msg) from e\n\n    def convert_to_string(self) -> Message:\n        \"\"\"Convert input data to string with proper error handling.\"\"\"\n        result = \"\"\n        if isinstance(self.input_data, list):\n            result = \"\\n\".join([self._safe_convert(item) for item in self.input_data])\n        else:\n            result = self._safe_convert(self.input_data)\n        self.log(f\"Converted to string with length: {len(result)}\")\n\n        message = Message(text=result)\n        self.status = message\n        return message\n"
              },
              "input_data": {
                "_input_type": "HandleInput",
                "advanced": false,
                "display_name": "Data or DataFrame",
                "dynamic": false,
                "info": "Accepts either a DataFrame or a Data object.",
                "input_types": ["DataFrame", "Data"],
                "list": false,
                "list_add_label": "Add More",
                "name": "input_data",
                "placeholder": "",
                "required": true,
                "show": true,
                "title_case": false,
                "trace_as_metadata": true,
                "type": "other",
                "value": ""
              },
              "mode": {
                "_input_type": "TabInput",
                "advanced": false,
                "display_name": "Mode",
                "dynamic": false,
                "info": "Convert into raw string instead of using a template.",
                "name": "mode",
                "options": ["Parser", "Stringify"],
                "placeholder": "",
                "real_time_refresh": true,
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "tab",
                "value": "Parser"
              },
              "pattern": {
                "_input_type": "MultilineInput",
                "advanced": false,
                "copy_field": false,
                "display_name": "Template",
                "dynamic": true,
                "info": "Use variables within curly brackets to extract column values for DataFrames or key values for Data.For example: `Name: {Name}, Age: {Age}, Country: {Country}`",
                "input_types": ["Message"],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "multiline": true,
                "name": "pattern",
                "placeholder": "",
                "required": true,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": "files-{folderId}"
              },
              "sep": {
                "_input_type": "MessageTextInput",
                "advanced": true,
                "display_name": "Separator",
                "dynamic": false,
                "info": "String used to separate rows/items.",
                "input_types": ["Message"],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "sep",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": "\n"
              }
            },
            "tool_mode": false
          },
          "showNode": true,
          "type": "ParserComponent"
        },
        "dragging": false,
        "id": "ParserComponent-IPomb",
        "measured": {
          "height": 393,
          "width": 320
        },
        "position": {
          "x": 1563.3258540558822,
          "y": 314.3721363023799
        },
        "selected": false,
        "type": "genericNode"
      },
      {
        "data": {
          "id": "OnlyofficeDocspaceGetFile-9XpHi",
          "node": {
            "base_classes": ["Data", "Tool"],
            "beta": false,
            "conditional_paths": [],
            "custom_fields": {},
            "description": "Get a file from ONLYOFFICE DocSpace.",
            "display_name": "Get File",
            "documentation": "",
            "edited": false,
            "field_order": ["auth_text", "file_id"],
            "frozen": false,
            "icon": "onlyoffice",
            "legacy": false,
            "lf_version": "1.4.1",
            "metadata": {},
            "minimized": false,
            "output_types": [],
            "outputs": [
              {
                "allows_loop": false,
                "cache": true,
                "display_name": "Data",
                "hidden": false,
                "method": "build_data",
                "name": "api_build_data",
                "selected": "Data",
                "tool_mode": true,
                "types": ["Data"],
                "value": "__UNDEFINED__"
              },
              {
                "allows_loop": false,
                "cache": true,
                "display_name": "Tool",
                "hidden": true,
                "method": "build_tool",
                "name": "api_build_tool",
                "selected": "Tool",
                "tool_mode": true,
                "types": ["Tool"],
                "value": "__UNDEFINED__"
              }
            ],
            "pinned": false,
            "template": {
              "_type": "Component",
              "auth_text": {
                "_input_type": "AuthTextInput",
                "advanced": true,
                "display_name": "Text from Basic Authentication",
                "dynamic": false,
                "info": "Text output from the Basic Authentication component.",
                "input_types": [],
                "load_from_db": false,
                "name": "auth_text",
                "password": true,
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "type": "str",
                "value": ""
              },
              "code": {
                "advanced": true,
                "dynamic": true,
                "fileTypes": [],
                "file_path": "",
                "info": "",
                "list": false,
                "load_from_db": false,
                "multiline": true,
                "name": "code",
                "password": false,
                "placeholder": "",
                "required": true,
                "show": true,
                "title_case": false,
                "type": "code",
                "value": "from typing import Any\n\nfrom langchain.tools import StructuredTool\nfrom pydantic import BaseModel, Field\n\nfrom langflow.base.onlyoffice.docspace import (\n    AuthTextInput,\n    Component,\n    DataOutput,\n    ErrorResponse,\n    FileIdInput,\n    ToolOutput,\n)\nfrom langflow.field_typing import Tool\nfrom langflow.schema import Data\n\n\nclass OnlyofficeDocspaceGetFile(Component):\n    display_name = \"Get File\"\n    description = \"Get a file from ONLYOFFICE DocSpace.\"\n    name = \"OnlyofficeDocspaceGetFile\"\n\n\n    inputs = [\n        AuthTextInput(),\n        FileIdInput(info=\"The ID of the file to get.\"),\n    ]\n\n\n    outputs = [\n        DataOutput(),\n        ToolOutput(),\n    ]\n\n\n    class Schema(BaseModel):\n        file_id: int = Field(..., description=\"The ID of the file to get.\")\n\n\n    def _create_schema(self) -> Schema:\n        return self.Schema(\n            file_id=self.file_id,\n        )\n\n\n    async def build_data(self) -> Data:\n        schema = self._create_schema()\n        data = await self._get_file(schema)\n        return Data(data=data)\n\n\n    def build_tool(self) -> Tool:\n        return StructuredTool.from_function(\n            name=\"onlyoffice_docspace_get_file\",\n            description=\"Get a file from ONLYOFFICE DocSpace.\",\n            coroutine=self._tool_func,\n            args_schema=self.Schema,\n        )\n\n\n    async def _tool_func(self, **kwargs) -> Any:\n        schema = self.Schema(**kwargs)\n        return self._get_file(schema)\n\n\n    async def _get_file(self, schema: Schema) -> Any:\n        client = await self._get_client()\n\n        result, response = client.files.get_file(schema.file_id)\n        if isinstance(response, ErrorResponse):\n            raise response.exception\n\n        return result\n"
              },
              "file_id": {
                "_input_type": "FileIdInput",
                "advanced": false,
                "display_name": "File ID",
                "dynamic": false,
                "info": "The ID of the file to get.",
                "input_types": ["Message"],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "file_id",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              }
            },
            "tool_mode": false
          },
          "showNode": true,
          "type": "OnlyofficeDocspaceGetFile"
        },
        "dragging": false,
        "id": "OnlyofficeDocspaceGetFile-9XpHi",
        "measured": {
          "height": 229,
          "width": 320
        },
        "position": {
          "x": 1014.4082453487777,
          "y": 985.6761061467912
        },
        "selected": false,
        "type": "genericNode"
      },
      {
        "data": {
          "id": "QdrantCheckFileComponent-E8DyR",
          "node": {
            "base_classes": ["Message"],
            "beta": false,
            "conditional_paths": [],
            "custom_fields": {},
            "description": "Check if document exists in Qdrant Vector Store",
            "display_name": "Qdrant Check File",
            "documentation": "",
            "edited": false,
            "field_order": [
              "collection_name",
              "qdrant_host",
              "qdrant_port",
              "embedding",
              "metadata"
            ],
            "frozen": false,
            "icon": "Qdrant",
            "legacy": false,
            "lf_version": "1.4.1",
            "metadata": {},
            "minimized": false,
            "output_types": [],
            "outputs": [
              {
                "allows_loop": false,
                "cache": true,
                "display_name": "Check document",
                "hidden": false,
                "method": "check_document",
                "name": "check",
                "selected": "Message",
                "tool_mode": true,
                "types": ["Message"],
                "value": "__UNDEFINED__"
              }
            ],
            "pinned": false,
            "template": {
              "_type": "Component",
              "code": {
                "advanced": true,
                "dynamic": true,
                "fileTypes": [],
                "file_path": "",
                "info": "",
                "list": false,
                "load_from_db": false,
                "multiline": true,
                "name": "code",
                "password": false,
                "placeholder": "",
                "required": true,
                "show": true,
                "title_case": false,
                "type": "code",
                "value": "from langchain.embeddings.base import Embeddings\nfrom langchain_community.vectorstores import Qdrant\nfrom langchain_core.documents import Document\nfrom langflow.custom import Component\nfrom langflow.schema import Message\nfrom langflow.io import (\n    DataInput,\n    Output,\n)\n\nfrom langflow.utils.qdrant import get_qdrant_client, check_collection_exists, create_collection, check_document_exists, qdrant_inputs\n\n\nclass QdrantCheckFileComponent(Component):\n    display_name = \"Qdrant Check File\"\n    description = \"Check if document exists in Qdrant Vector Store\"\n    icon = \"Qdrant\"\n\n    inputs = [\n        *qdrant_inputs,\n        DataInput(\n            name='metadata',\n            display_name=\"Metadata\"\n        ),\n    ]\n\n    outputs = [\n        Output(name=\"check\",\n               display_name=\"Check document\",\n               method=\"check_document\")\n    ]\n\n    def build_vector_store(self) -> Qdrant | None:\n        try:\n            collection_name: str = self.collection_name.get_text()\n            embedding: Embeddings = self.embedding\n\n            client = get_qdrant_client(\n                self.qdrant_host.get_text(), self.qdrant_port.get_text())\n\n            if not check_collection_exists(client, collection_name):\n                # Get vector size from first document\n                return None\n\n            qdrant = Qdrant(client=client,\n                            embeddings=embedding,\n                            collection_name=collection_name)\n\n            return qdrant\n\n        except Exception as e:\n            raise Exception(f\"Error building vector store: {str(e)}\")\n\n    def check_document(self) -> Message:\n        qdrant = self.build_vector_store()\n\n        if not qdrant:\n            return Message(text=\"not_found\")\n\n        if not self.metadata:\n            return Message(text=\"No metadata provided\")\n\n        doc = Document(page_content=\"content\", metadata={**self.metadata.data})\n\n        if check_document_exists(qdrant, doc):\n            return Message(text=\"exist\")\n\n        return Message(text=\"not_found\")\n"
              },
              "collection_name": {
                "_input_type": "MessageInput",
                "advanced": false,
                "display_name": "Collection Name",
                "dynamic": false,
                "info": "",
                "input_types": ["Message"],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "collection_name",
                "placeholder": "",
                "required": true,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "embedding": {
                "_input_type": "HandleInput",
                "advanced": false,
                "display_name": "Embedding",
                "dynamic": false,
                "info": "",
                "input_types": ["Embeddings"],
                "list": false,
                "list_add_label": "Add More",
                "name": "embedding",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "trace_as_metadata": true,
                "type": "other",
                "value": ""
              },
              "metadata": {
                "_input_type": "DataInput",
                "advanced": false,
                "display_name": "Metadata",
                "dynamic": false,
                "info": "",
                "input_types": ["Data"],
                "list": false,
                "list_add_label": "Add More",
                "name": "metadata",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "other",
                "value": ""
              },
              "qdrant_host": {
                "_input_type": "MessageInput",
                "advanced": false,
                "display_name": "Qdrant Host",
                "dynamic": false,
                "info": "",
                "input_types": ["Message"],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "qdrant_host",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "qdrant_port": {
                "_input_type": "MessageInput",
                "advanced": false,
                "display_name": "Qdrant Port",
                "dynamic": false,
                "info": "",
                "input_types": ["Message"],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "qdrant_port",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              }
            },
            "tool_mode": false
          },
          "showNode": true,
          "type": "QdrantCheckFileComponent"
        },
        "dragging": false,
        "id": "QdrantCheckFileComponent-E8DyR",
        "measured": {
          "height": 501,
          "width": 320
        },
        "position": {
          "x": 2147.853098995193,
          "y": 762.6782668585257
        },
        "selected": false,
        "type": "genericNode"
      },
      {
        "data": {
          "id": "DocSpaceAIEmbeddings-HKUk2",
          "node": {
            "base_classes": ["Embeddings"],
            "beta": false,
            "conditional_paths": [],
            "custom_fields": {},
            "description": "Generate embeddings using DocSpace models.",
            "display_name": "DocSpaceAI Embeddings",
            "documentation": "",
            "edited": false,
            "field_order": [
              "portal_url",
              "api_key",
              "chunk_size",
              "embedding_ctx_length",
              "max_retries",
              "model",
              "model_kwargs",
              "request_timeout",
              "show_progress_bar",
              "skip_empty",
              "dimensions"
            ],
            "frozen": false,
            "icon": "onlyoffice",
            "legacy": false,
            "lf_version": "1.4.1",
            "metadata": {},
            "minimized": false,
            "output_types": [],
            "outputs": [
              {
                "allows_loop": false,
                "cache": true,
                "display_name": "Embeddings",
                "hidden": false,
                "method": "build_embeddings",
                "name": "embeddings",
                "required_inputs": ["api_key", "model", "portal_url"],
                "selected": "Embeddings",
                "tool_mode": true,
                "types": ["Embeddings"],
                "value": "__UNDEFINED__"
              }
            ],
            "pinned": false,
            "template": {
              "_type": "Component",
              "api_key": {
                "_input_type": "SecretStrInput",
                "advanced": false,
                "display_name": "API Key",
                "dynamic": false,
                "info": "The API key to use for the DocSpace AI model.",
                "input_types": [],
                "load_from_db": true,
                "name": "api_key",
                "password": true,
                "placeholder": "",
                "required": true,
                "show": true,
                "title_case": false,
                "type": "str",
                "value": ""
              },
              "chunk_size": {
                "_input_type": "IntInput",
                "advanced": true,
                "display_name": "Chunk Size",
                "dynamic": false,
                "info": "",
                "list": false,
                "list_add_label": "Add More",
                "name": "chunk_size",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "int",
                "value": 1000
              },
              "code": {
                "advanced": true,
                "dynamic": true,
                "fileTypes": [],
                "file_path": "",
                "info": "",
                "list": false,
                "load_from_db": false,
                "multiline": true,
                "name": "code",
                "password": false,
                "placeholder": "",
                "required": true,
                "show": true,
                "title_case": false,
                "type": "code",
                "value": "import os\n\nfrom langchain_openai import OpenAIEmbeddings\nfrom pydantic import SecretStr\n\nfrom langflow.base.embeddings.model import LCEmbeddingsModel\nfrom langflow.field_typing import Embeddings\nfrom langflow.inputs import BoolInput, DictInput, FloatInput, IntInput, MessageTextInput\nfrom langflow.inputs.inputs import SecretStrInput\n\n\nclass DocSpaceEmbeddingsComponent(LCEmbeddingsModel):\n    display_name = \"DocSpaceAI Embeddings\"\n    description = \"Generate embeddings using DocSpace models.\"\n    icon = \"onlyoffice\"\n    name = \"DocSpaceAIEmbeddings\"\n\n    inputs = [\n        MessageTextInput(\n            name=\"portal_url\",\n            display_name=\"Portal URL\",\n            info=\"DocSpace portal URL.\",\n            required=True,\n        ),\n        SecretStrInput(\n            name=\"api_key\",\n            display_name=\"API Key\",\n            info=\"The API key to use for the DocSpace AI model.\",\n            required=True,\n        ),\n        IntInput(name=\"chunk_size\", display_name=\"Chunk Size\", advanced=True, value=1000),\n        IntInput(name=\"embedding_ctx_length\", display_name=\"Embedding Context Length\", advanced=True, value=1536),\n        IntInput(name=\"max_retries\", display_name=\"Max Retries\", value=3, advanced=True),\n        MessageTextInput(\n            name=\"model\",\n            display_name=\"Model\",\n            advanced=False,\n            required=True\n        ),\n        DictInput(name=\"model_kwargs\", display_name=\"Model Kwargs\", advanced=True),\n        FloatInput(name=\"request_timeout\", display_name=\"Request Timeout\", advanced=True),\n        BoolInput(name=\"show_progress_bar\", display_name=\"Show Progress Bar\", advanced=True),\n        BoolInput(name=\"skip_empty\", display_name=\"Skip Empty\", advanced=True),\n        IntInput(\n            name=\"dimensions\",\n            display_name=\"Dimensions\",\n            info=\"The number of dimensions the resulting output embeddings should have. \"\n                 \"Only supported by certain models.\",\n            advanced=True,\n        ),\n    ]\n\n    def build_embeddings(self) -> Embeddings:\n        base_url = os.environ.get(\"AI_GATEWAY_BASE_URL\")\n        if not base_url:\n            msg = \"AI_GATEWAY_BASE_URL environment variable not set\"\n            raise ValueError(msg)\n\n        return OpenAIEmbeddings(\n            model=self.model,\n            dimensions=self.dimensions or None,\n            base_url=base_url,\n            embedding_ctx_length=self.embedding_ctx_length,\n            check_embedding_ctx_length=False,\n            api_key=SecretStr(\"docspace\"),\n            allowed_special=\"all\",\n            disallowed_special=\"all\",\n            chunk_size=self.chunk_size,\n            max_retries=self.max_retries,\n            timeout=self.request_timeout or None,\n            show_progress_bar=self.show_progress_bar,\n            model_kwargs=self.model_kwargs,\n            skip_empty=self.skip_empty,\n            default_headers={\n                \"origin\": self.portal_url,\n                \"cookie\": f\"asc_auth_key={self.api_key};\"\n            },\n        )\n"
              },
              "dimensions": {
                "_input_type": "IntInput",
                "advanced": true,
                "display_name": "Dimensions",
                "dynamic": false,
                "info": "The number of dimensions the resulting output embeddings should have. Only supported by certain models.",
                "list": false,
                "list_add_label": "Add More",
                "name": "dimensions",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "int",
                "value": ""
              },
              "embedding_ctx_length": {
                "_input_type": "IntInput",
                "advanced": true,
                "display_name": "Embedding Context Length",
                "dynamic": false,
                "info": "",
                "list": false,
                "list_add_label": "Add More",
                "name": "embedding_ctx_length",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "int",
                "value": 1536
              },
              "max_retries": {
                "_input_type": "IntInput",
                "advanced": true,
                "display_name": "Max Retries",
                "dynamic": false,
                "info": "",
                "list": false,
                "list_add_label": "Add More",
                "name": "max_retries",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "int",
                "value": 3
              },
              "model": {
                "_input_type": "MessageTextInput",
                "advanced": false,
                "display_name": "Model",
                "dynamic": false,
                "info": "",
                "input_types": ["Message"],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "model",
                "placeholder": "",
                "required": true,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": "BAAI/bge-base-en-v1.5"
              },
              "model_kwargs": {
                "_input_type": "DictInput",
                "advanced": true,
                "display_name": "Model Kwargs",
                "dynamic": false,
                "info": "",
                "list": false,
                "list_add_label": "Add More",
                "name": "model_kwargs",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "type": "dict",
                "value": {}
              },
              "portal_url": {
                "_input_type": "MessageTextInput",
                "advanced": false,
                "display_name": "Portal URL",
                "dynamic": false,
                "info": "DocSpace portal URL.",
                "input_types": ["Message"],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": true,
                "name": "portal_url",
                "placeholder": "",
                "required": true,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": "portal_origin"
              },
              "request_timeout": {
                "_input_type": "FloatInput",
                "advanced": true,
                "display_name": "Request Timeout",
                "dynamic": false,
                "info": "",
                "list": false,
                "list_add_label": "Add More",
                "name": "request_timeout",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "float",
                "value": ""
              },
              "show_progress_bar": {
                "_input_type": "BoolInput",
                "advanced": true,
                "display_name": "Show Progress Bar",
                "dynamic": false,
                "info": "",
                "list": false,
                "list_add_label": "Add More",
                "name": "show_progress_bar",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "bool",
                "value": false
              },
              "skip_empty": {
                "_input_type": "BoolInput",
                "advanced": true,
                "display_name": "Skip Empty",
                "dynamic": false,
                "info": "",
                "list": false,
                "list_add_label": "Add More",
                "name": "skip_empty",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "bool",
                "value": false
              }
            },
            "tool_mode": false
          },
          "showNode": true,
          "type": "DocSpaceAIEmbeddings"
        },
        "dragging": false,
        "id": "DocSpaceAIEmbeddings-HKUk2",
        "measured": {
          "height": 413,
          "width": 320
        },
        "position": {
          "x": 1554.328643824936,
          "y": 734.6486871176915
        },
        "selected": false,
        "type": "genericNode"
      }
    ],
    "viewport": {
      "x": -254.74260247289317,
      "y": -3.347080099771631,
      "zoom": 0.5878735928468003
    }
  },
  "description": "Check exists vectorized file",
  "endpoint_name": null,
  "id": "f4769a6e-7811-4457-9dd3-6312867eb9dc",
  "is_component": false,
  "last_tested_version": "1.4.1",
  "name": "check_vectorized_file",
  "tags": []
}
