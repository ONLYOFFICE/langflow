{
  "data": {
    "edges": [
      {
        "animated": false,
        "className": "",
        "data": {
          "sourceHandle": {
            "dataType": "TextInput",
            "id": "TextInput-leas2",
            "name": "text",
            "output_types": [
              "Message"
            ]
          },
          "targetHandle": {
            "fieldName": "file_id",
            "id": "OnlyofficeDocspaceGetFile-4RmSb",
            "inputTypes": [
              "Message"
            ],
            "type": "str"
          }
        },
        "id": "reactflow__edge-TextInput-leas2{œdataTypeœ:œTextInputœ,œidœ:œTextInput-leas2œ,œnameœ:œtextœ,œoutput_typesœ:[œMessageœ]}-OnlyofficeDocspaceGetFile-4RmSb{œfieldNameœ:œfile_idœ,œidœ:œOnlyofficeDocspaceGetFile-4RmSbœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
        "selected": false,
        "source": "TextInput-leas2",
        "sourceHandle": "{œdataTypeœ:œTextInputœ,œidœ:œTextInput-leas2œ,œnameœ:œtextœ,œoutput_typesœ:[œMessageœ]}",
        "target": "OnlyofficeDocspaceGetFile-4RmSb",
        "targetHandle": "{œfieldNameœ:œfile_idœ,œidœ:œOnlyofficeDocspaceGetFile-4RmSbœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}"
      },
      {
        "animated": false,
        "className": "",
        "data": {
          "sourceHandle": {
            "dataType": "OnlyofficeDocspaceGetFile",
            "id": "OnlyofficeDocspaceGetFile-4RmSb",
            "name": "api_build_data",
            "output_types": [
              "Data"
            ]
          },
          "targetHandle": {
            "fieldName": "data",
            "id": "ParseData-AXCBh",
            "inputTypes": [
              "Data"
            ],
            "type": "other"
          }
        },
        "id": "reactflow__edge-OnlyofficeDocspaceGetFile-4RmSb{œdataTypeœ:œOnlyofficeDocspaceGetFileœ,œidœ:œOnlyofficeDocspaceGetFile-4RmSbœ,œnameœ:œapi_build_dataœ,œoutput_typesœ:[œDataœ]}-ParseData-AXCBh{œfieldNameœ:œdataœ,œidœ:œParseData-AXCBhœ,œinputTypesœ:[œDataœ],œtypeœ:œotherœ}",
        "selected": false,
        "source": "OnlyofficeDocspaceGetFile-4RmSb",
        "sourceHandle": "{œdataTypeœ:œOnlyofficeDocspaceGetFileœ,œidœ:œOnlyofficeDocspaceGetFile-4RmSbœ,œnameœ:œapi_build_dataœ,œoutput_typesœ:[œDataœ]}",
        "target": "ParseData-AXCBh",
        "targetHandle": "{œfieldNameœ:œdataœ,œidœ:œParseData-AXCBhœ,œinputTypesœ:[œDataœ],œtypeœ:œotherœ}"
      },
      {
        "animated": false,
        "className": "",
        "data": {
          "sourceHandle": {
            "dataType": "OnlyofficeDocspaceGetFile",
            "id": "OnlyofficeDocspaceGetFile-4RmSb",
            "name": "api_build_data",
            "output_types": [
              "Data"
            ]
          },
          "targetHandle": {
            "fieldName": "data",
            "id": "ParseData-D2m4J",
            "inputTypes": [
              "Data"
            ],
            "type": "other"
          }
        },
        "id": "reactflow__edge-OnlyofficeDocspaceGetFile-4RmSb{œdataTypeœ:œOnlyofficeDocspaceGetFileœ,œidœ:œOnlyofficeDocspaceGetFile-4RmSbœ,œnameœ:œapi_build_dataœ,œoutput_typesœ:[œDataœ]}-ParseData-D2m4J{œfieldNameœ:œdataœ,œidœ:œParseData-D2m4Jœ,œinputTypesœ:[œDataœ],œtypeœ:œotherœ}",
        "selected": false,
        "source": "OnlyofficeDocspaceGetFile-4RmSb",
        "sourceHandle": "{œdataTypeœ:œOnlyofficeDocspaceGetFileœ,œidœ:œOnlyofficeDocspaceGetFile-4RmSbœ,œnameœ:œapi_build_dataœ,œoutput_typesœ:[œDataœ]}",
        "target": "ParseData-D2m4J",
        "targetHandle": "{œfieldNameœ:œdataœ,œidœ:œParseData-D2m4Jœ,œinputTypesœ:[œDataœ],œtypeœ:œotherœ}"
      },
      {
        "animated": false,
        "className": "",
        "data": {
          "sourceHandle": {
            "dataType": "RunFlow",
            "id": "RunFlow-CBCxw",
            "name": "flow_outputs_message",
            "output_types": [
              "Message"
            ]
          },
          "targetHandle": {
            "fieldName": "content",
            "id": "OnlyofficeDocspaceUploadFile-PjLJ7",
            "inputTypes": [
              "Message"
            ],
            "type": "str"
          }
        },
        "id": "reactflow__edge-RunFlow-CBCxw{œdataTypeœ:œRunFlowœ,œidœ:œRunFlow-CBCxwœ,œnameœ:œflow_outputs_messageœ,œoutput_typesœ:[œMessageœ]}-OnlyofficeDocspaceUploadFile-PjLJ7{œfieldNameœ:œcontentœ,œidœ:œOnlyofficeDocspaceUploadFile-PjLJ7œ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
        "selected": false,
        "source": "RunFlow-CBCxw",
        "sourceHandle": "{œdataTypeœ:œRunFlowœ,œidœ:œRunFlow-CBCxwœ,œnameœ:œflow_outputs_messageœ,œoutput_typesœ:[œMessageœ]}",
        "target": "OnlyofficeDocspaceUploadFile-PjLJ7",
        "targetHandle": "{œfieldNameœ:œcontentœ,œidœ:œOnlyofficeDocspaceUploadFile-PjLJ7œ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}"
      },
      {
        "animated": false,
        "className": "",
        "data": {
          "sourceHandle": {
            "dataType": "ParseData",
            "id": "ParseData-AXCBh",
            "name": "text",
            "output_types": [
              "Message"
            ]
          },
          "targetHandle": {
            "fieldName": "folder_id",
            "id": "OnlyofficeDocspaceUploadFile-PjLJ7",
            "inputTypes": [
              "Message"
            ],
            "type": "str"
          }
        },
        "id": "reactflow__edge-ParseData-AXCBh{œdataTypeœ:œParseDataœ,œidœ:œParseData-AXCBhœ,œnameœ:œtextœ,œoutput_typesœ:[œMessageœ]}-OnlyofficeDocspaceUploadFile-PjLJ7{œfieldNameœ:œfolder_idœ,œidœ:œOnlyofficeDocspaceUploadFile-PjLJ7œ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
        "selected": false,
        "source": "ParseData-AXCBh",
        "sourceHandle": "{œdataTypeœ:œParseDataœ,œidœ:œParseData-AXCBhœ,œnameœ:œtextœ,œoutput_typesœ:[œMessageœ]}",
        "target": "OnlyofficeDocspaceUploadFile-PjLJ7",
        "targetHandle": "{œfieldNameœ:œfolder_idœ,œidœ:œOnlyofficeDocspaceUploadFile-PjLJ7œ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}"
      },
      {
        "animated": false,
        "className": "",
        "data": {
          "sourceHandle": {
            "dataType": "ParseData",
            "id": "ParseData-D2m4J",
            "name": "text",
            "output_types": [
              "Message"
            ]
          },
          "targetHandle": {
            "fieldName": "filename",
            "id": "OnlyofficeDocspaceUploadFile-PjLJ7",
            "inputTypes": [
              "Message"
            ],
            "type": "str"
          }
        },
        "id": "reactflow__edge-ParseData-D2m4J{œdataTypeœ:œParseDataœ,œidœ:œParseData-D2m4Jœ,œnameœ:œtextœ,œoutput_typesœ:[œMessageœ]}-OnlyofficeDocspaceUploadFile-PjLJ7{œfieldNameœ:œfilenameœ,œidœ:œOnlyofficeDocspaceUploadFile-PjLJ7œ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
        "selected": false,
        "source": "ParseData-D2m4J",
        "sourceHandle": "{œdataTypeœ:œParseDataœ,œidœ:œParseData-D2m4Jœ,œnameœ:œtextœ,œoutput_typesœ:[œMessageœ]}",
        "target": "OnlyofficeDocspaceUploadFile-PjLJ7",
        "targetHandle": "{œfieldNameœ:œfilenameœ,œidœ:œOnlyofficeDocspaceUploadFile-PjLJ7œ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}"
      },
      {
        "className": "",
        "data": {
          "sourceHandle": {
            "dataType": "TextInput",
            "id": "TextInput-leas2",
            "name": "text",
            "output_types": [
              "Message"
            ]
          },
          "targetHandle": {
            "fieldName": "TextInput-pQkY2~input_value",
            "id": "RunFlow-CBCxw",
            "inputTypes": [
              "Message"
            ],
            "type": "str"
          }
        },
        "id": "xy-edge__TextInput-leas2{œdataTypeœ:œTextInputœ,œidœ:œTextInput-leas2œ,œnameœ:œtextœ,œoutput_typesœ:[œMessageœ]}-RunFlow-CBCxw{œfieldNameœ:œTextInput-pQkY2~input_valueœ,œidœ:œRunFlow-CBCxwœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
        "selected": false,
        "source": "TextInput-leas2",
        "sourceHandle": "{œdataTypeœ:œTextInputœ,œidœ:œTextInput-leas2œ,œnameœ:œtextœ,œoutput_typesœ:[œMessageœ]}",
        "target": "RunFlow-CBCxw",
        "targetHandle": "{œfieldNameœ:œTextInput-pQkY2~input_valueœ,œidœ:œRunFlow-CBCxwœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}"
      }
    ],
    "nodes": [
      {
        "data": {
          "id": "RunFlow-CBCxw",
          "node": {
            "base_classes": [
              "Data",
              "DataFrame",
              "Message"
            ],
            "beta": true,
            "category": "logic",
            "conditional_paths": [],
            "custom_fields": {},
            "description": "Creates a tool component from a Flow that takes all its inputs and runs it.  \n **Select a Flow to use the tool mode**",
            "display_name": "Run Flow",
            "documentation": "",
            "edited": false,
            "field_order": [
              "flow_name_selected",
              "session_id"
            ],
            "frozen": false,
            "icon": "Workflow",
            "key": "RunFlow",
            "legacy": false,
            "lf_version": "1.2.0",
            "metadata": {},
            "minimized": false,
            "output_types": [],
            "outputs": [
              {
                "allows_loop": false,
                "cache": true,
                "display_name": "Flow Data Output",
                "hidden": true,
                "method": "data_output",
                "name": "flow_outputs_data",
                "required_inputs": [],
                "selected": "Data",
                "tool_mode": true,
                "types": [
                  "Data"
                ],
                "value": "__UNDEFINED__"
              },
              {
                "allows_loop": false,
                "cache": true,
                "display_name": "Flow Dataframe Output",
                "hidden": true,
                "method": "dataframe_output",
                "name": "flow_outputs_dataframe",
                "required_inputs": [],
                "selected": "DataFrame",
                "tool_mode": true,
                "types": [
                  "DataFrame"
                ],
                "value": "__UNDEFINED__"
              },
              {
                "allows_loop": false,
                "cache": true,
                "display_name": "Flow Message Output",
                "method": "message_output",
                "name": "flow_outputs_message",
                "required_inputs": [],
                "selected": "Message",
                "tool_mode": true,
                "types": [
                  "Message"
                ],
                "value": "__UNDEFINED__"
              }
            ],
            "pinned": false,
            "score": 0.007568328950209746,
            "template": {
              "TextInput-pQkY2~input_value": {
                "_input_type": "MultilineInput",
                "advanced": false,
                "copy_field": false,
                "display_name": "Text Input - Text",
                "dynamic": false,
                "info": "Text to be passed as input.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "multiline": true,
                "name": "TextInput-pQkY2~input_value",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": true,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "_type": "Component",
              "code": {
                "advanced": true,
                "dynamic": true,
                "fileTypes": [],
                "file_path": "",
                "info": "",
                "list": false,
                "load_from_db": false,
                "multiline": true,
                "name": "code",
                "password": false,
                "placeholder": "",
                "required": true,
                "show": true,
                "title_case": false,
                "type": "code",
                "value": "from typing import Any\n\nfrom loguru import logger\n\nfrom langflow.base.tools.run_flow import RunFlowBaseComponent\nfrom langflow.helpers.flow import run_flow\nfrom langflow.schema import dotdict\n\n\nclass RunFlowComponent(RunFlowBaseComponent):\n    display_name = \"Run Flow\"\n    description = (\n        \"Creates a tool component from a Flow that takes all its inputs and runs it. \"\n        \" \\n **Select a Flow to use the tool mode**\"\n    )\n    beta = True\n    name = \"RunFlow\"\n    icon = \"Workflow\"\n\n    inputs = RunFlowBaseComponent._base_inputs\n    outputs = RunFlowBaseComponent._base_outputs\n\n    async def update_build_config(self, build_config: dotdict, field_value: Any, field_name: str | None = None):\n        if field_name == \"flow_name_selected\":\n            build_config[\"flow_name_selected\"][\"options\"] = await self.get_flow_names()\n            missing_keys = [key for key in self.default_keys if key not in build_config]\n            if missing_keys:\n                msg = f\"Missing required keys in build_config: {missing_keys}\"\n                raise ValueError(msg)\n            if field_value is not None:\n                try:\n                    graph = await self.get_graph(field_value)\n                    build_config = self.update_build_config_from_graph(build_config, graph)\n                except Exception as e:\n                    msg = f\"Error building graph for flow {field_value}\"\n                    logger.exception(msg)\n                    raise RuntimeError(msg) from e\n        return build_config\n\n    async def run_flow_with_tweaks(self):\n        tweaks: dict = {}\n\n        flow_name_selected = self._attributes.get(\"flow_name_selected\")\n        parsed_flow_tweak_data = self._attributes.get(\"flow_tweak_data\", {})\n        if not isinstance(parsed_flow_tweak_data, dict):\n            parsed_flow_tweak_data = parsed_flow_tweak_data.dict()\n\n        if parsed_flow_tweak_data != {}:\n            for field in parsed_flow_tweak_data:\n                if \"~\" in field:\n                    [node, name] = field.split(\"~\")\n                    if node not in tweaks:\n                        tweaks[node] = {}\n                    tweaks[node][name] = parsed_flow_tweak_data[field]\n        else:\n            for field in self._attributes:\n                if field not in self.default_keys and \"~\" in field:\n                    [node, name] = field.split(\"~\")\n                    if node not in tweaks:\n                        tweaks[node] = {}\n                    tweaks[node][name] = self._attributes[field]\n\n        return await run_flow(\n            inputs=None,\n            output_type=\"all\",\n            flow_id=None,\n            flow_name=flow_name_selected,\n            tweaks=tweaks,\n            user_id=str(self.user_id),\n            session_id=self.graph.session_id or self.session_id,\n        )\n"
              },
              "flow_name_selected": {
                "_input_type": "DropdownInput",
                "advanced": false,
                "combobox": false,
                "dialog_inputs": {},
                "display_name": "Flow Name",
                "dynamic": false,
                "info": "The name of the flow to run.",
                "name": "flow_name_selected",
                "options": [],
                "options_metadata": [],
                "placeholder": "",
                "real_time_refresh": true,
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "str",
                "value": "file_summarization"
              },
              "session_id": {
                "_input_type": "MessageInput",
                "advanced": true,
                "display_name": "Session ID",
                "dynamic": false,
                "info": "The session ID to run the flow in.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "session_id",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": {
                  "data": {
                    "category": "message",
                    "content_blocks": [],
                    "edit": false,
                    "error": false,
                    "files": [],
                    "flow_id": null,
                    "properties": {
                      "allow_markdown": false,
                      "edited": false,
                      "source": {
                        "display_name": null,
                        "id": null,
                        "source": null
                      },
                      "state": "complete",
                      "targets": []
                    },
                    "sender": null,
                    "sender_name": null,
                    "session_id": "",
                    "text": "",
                    "timestamp": "2025-03-26 11:46:46 UTC"
                  },
                  "default_value": "",
                  "text_key": "text"
                }
              }
            },
            "tool_mode": false
          },
          "showNode": true,
          "type": "RunFlow"
        },
        "dragging": false,
        "id": "RunFlow-CBCxw",
        "measured": {
          "height": 351,
          "width": 320
        },
        "position": {
          "x": 1040.0926825420488,
          "y": 829.611411071784
        },
        "selected": false,
        "type": "genericNode"
      },
      {
        "data": {
          "id": "TextInput-leas2",
          "node": {
            "base_classes": [
              "Message"
            ],
            "beta": false,
            "category": "inputs",
            "conditional_paths": [],
            "custom_fields": {},
            "description": "Get text inputs from the Playground.",
            "display_name": "Text Input",
            "documentation": "",
            "edited": false,
            "field_order": [
              "input_value"
            ],
            "frozen": false,
            "icon": "type",
            "key": "TextInput",
            "legacy": false,
            "lf_version": "1.2.0",
            "metadata": {},
            "minimized": false,
            "output_types": [],
            "outputs": [
              {
                "allows_loop": false,
                "cache": true,
                "display_name": "Message",
                "method": "text_response",
                "name": "text",
                "selected": "Message",
                "tool_mode": true,
                "types": [
                  "Message"
                ],
                "value": "__UNDEFINED__"
              }
            ],
            "pinned": false,
            "score": 0.0020353564437605998,
            "template": {
              "_type": "Component",
              "code": {
                "advanced": true,
                "dynamic": true,
                "fileTypes": [],
                "file_path": "",
                "info": "",
                "list": false,
                "load_from_db": false,
                "multiline": true,
                "name": "code",
                "password": false,
                "placeholder": "",
                "required": true,
                "show": true,
                "title_case": false,
                "type": "code",
                "value": "from langflow.base.io.text import TextComponent\nfrom langflow.io import MultilineInput, Output\nfrom langflow.schema.message import Message\n\n\nclass TextInputComponent(TextComponent):\n    display_name = \"Text Input\"\n    description = \"Get text inputs from the Playground.\"\n    icon = \"type\"\n    name = \"TextInput\"\n\n    inputs = [\n        MultilineInput(\n            name=\"input_value\",\n            display_name=\"Text\",\n            info=\"Text to be passed as input.\",\n        ),\n    ]\n    outputs = [\n        Output(display_name=\"Message\", name=\"text\", method=\"text_response\"),\n    ]\n\n    def text_response(self) -> Message:\n        return Message(\n            text=self.input_value,\n        )\n"
              },
              "input_value": {
                "_input_type": "MultilineInput",
                "advanced": false,
                "copy_field": false,
                "display_name": "Text",
                "dynamic": false,
                "info": "Text to be passed as input.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "multiline": true,
                "name": "input_value",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              }
            },
            "tool_mode": false
          },
          "showNode": true,
          "type": "TextInput"
        },
        "dragging": false,
        "id": "TextInput-leas2",
        "measured": {
          "height": 229,
          "width": 320
        },
        "position": {
          "x": 164.026613517231,
          "y": 478.10252822292296
        },
        "selected": false,
        "type": "genericNode"
      },
      {
        "data": {
          "id": "OnlyofficeDocspaceGetFile-4RmSb",
          "node": {
            "base_classes": [
              "Data",
              "Tool"
            ],
            "beta": false,
            "category": "onlyoffice",
            "conditional_paths": [],
            "custom_fields": {},
            "description": "Get a file from ONLYOFFICE DocSpace.",
            "display_name": "Get File",
            "documentation": "",
            "edited": false,
            "field_order": [
              "auth_text",
              "file_id"
            ],
            "frozen": false,
            "icon": "onlyoffice",
            "key": "OnlyofficeDocspaceGetFile",
            "legacy": false,
            "lf_version": "1.2.0",
            "metadata": {},
            "minimized": false,
            "output_types": [],
            "outputs": [
              {
                "allows_loop": false,
                "cache": true,
                "display_name": "Data",
                "method": "build_data",
                "name": "api_build_data",
                "selected": "Data",
                "tool_mode": true,
                "types": [
                  "Data"
                ],
                "value": "__UNDEFINED__"
              },
              {
                "allows_loop": false,
                "cache": true,
                "display_name": "Tool",
                "hidden": true,
                "method": "build_tool",
                "name": "api_build_tool",
                "selected": "Tool",
                "tool_mode": true,
                "types": [
                  "Tool"
                ],
                "value": "__UNDEFINED__"
              }
            ],
            "pinned": false,
            "score": 8.569061098350962e-12,
            "template": {
              "_type": "Component",
              "auth_text": {
                "_input_type": "SecretStrInput",
                "advanced": true,
                "display_name": "Text from Basic Authentication",
                "dynamic": false,
                "info": "Text output from the Basic Authentication component.",
                "input_types": [
                  "Message"
                ],
                "load_from_db": false,
                "name": "auth_text",
                "password": true,
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "type": "str",
                "value": ""
              },
              "code": {
                "advanced": true,
                "dynamic": true,
                "fileTypes": [],
                "file_path": "",
                "info": "",
                "list": false,
                "load_from_db": false,
                "multiline": true,
                "name": "code",
                "password": false,
                "placeholder": "",
                "required": true,
                "show": true,
                "title_case": false,
                "type": "code",
                "value": "from typing import Any\n\nfrom langchain.tools import StructuredTool\nfrom pydantic import BaseModel, Field\n\nfrom langflow.base.onlyoffice.docspace.client import ErrorResponse\nfrom langflow.base.onlyoffice.docspace.component import Component\nfrom langflow.field_typing import Tool\nfrom langflow.inputs import MessageTextInput, SecretStrInput\nfrom langflow.io import Output\nfrom langflow.schema import Data\nfrom langflow.template import Output\n\n\nclass OnlyofficeDocspaceGetFile(Component):\n    display_name = \"Get File\"\n    description = \"Get a file from ONLYOFFICE DocSpace.\"\n    name = \"OnlyofficeDocspaceGetFile\"\n\n\n    inputs = [\n        SecretStrInput(\n            name=\"auth_text\",\n            display_name=\"Text from Basic Authentication\",\n            info=\"Text output from the Basic Authentication component.\",\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"file_id\",\n            display_name=\"File ID\",\n            info=\"The ID of the file to get.\",\n        ),\n    ]\n\n\n    outputs = [\n        Output(\n            display_name=\"Data\",\n            name=\"api_build_data\",\n            method=\"build_data\",\n        ),\n        Output(\n            display_name=\"Tool\",\n            name=\"api_build_tool\",\n            method=\"build_tool\",\n            hidden=True,\n        ),\n    ]\n\n\n    class Schema(BaseModel):\n        file_id: int = Field(..., description=\"The ID of the file to get.\")\n\n\n    def _create_schema(self) -> Schema:\n        return self.Schema(\n            file_id=self.file_id,\n        )\n\n\n    async def build_data(self) -> Data:\n        schema = self._create_schema()\n        data = await self._get_file(schema)\n        return Data(data=data)\n\n\n    def build_tool(self) -> Tool:\n        return StructuredTool.from_function(\n            name=\"onlyoffice_docspace_get_file\",\n            description=\"Get a file from ONLYOFFICE DocSpace.\",\n            coroutine=self._tool_func,\n            args_schema=self.Schema,\n        )\n\n\n    async def _tool_func(self, **kwargs) -> Any:\n        schema = self.Schema(**kwargs)\n        return self._get_file(schema)\n\n\n    async def _get_file(self, schema: Schema) -> Any:\n        client = await self._get_client()\n\n        result, response = client.files.get_file(schema.file_id)\n        if isinstance(response, ErrorResponse):\n            raise response.exception\n\n        return result\n"
              },
              "file_id": {
                "_input_type": "MessageTextInput",
                "advanced": false,
                "display_name": "File ID",
                "dynamic": false,
                "info": "The ID of the file to get.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "file_id",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              }
            },
            "tool_mode": false
          },
          "showNode": true,
          "type": "OnlyofficeDocspaceGetFile"
        },
        "dragging": false,
        "id": "OnlyofficeDocspaceGetFile-4RmSb",
        "measured": {
          "height": 229,
          "width": 320
        },
        "position": {
          "x": 1019.2634646298711,
          "y": 38.56591719642236
        },
        "selected": false,
        "type": "genericNode"
      },
      {
        "data": {
          "id": "ParseData-AXCBh",
          "node": {
            "base_classes": [
              "Data",
              "Message"
            ],
            "beta": false,
            "category": "processing",
            "conditional_paths": [],
            "custom_fields": {},
            "description": "Convert Data objects into Messages using any {field_name} from input data.",
            "display_name": "Data to Message",
            "documentation": "",
            "edited": false,
            "field_order": [
              "data",
              "template",
              "sep"
            ],
            "frozen": false,
            "icon": "message-square",
            "key": "ParseData",
            "legacy": false,
            "lf_version": "1.2.0",
            "metadata": {
              "legacy_name": "Parse Data"
            },
            "minimized": false,
            "output_types": [],
            "outputs": [
              {
                "allows_loop": false,
                "cache": true,
                "display_name": "Message",
                "method": "parse_data",
                "name": "text",
                "selected": "Message",
                "tool_mode": true,
                "types": [
                  "Message"
                ],
                "value": "__UNDEFINED__"
              },
              {
                "allows_loop": false,
                "cache": true,
                "display_name": "Data List",
                "method": "parse_data_as_list",
                "name": "data_list",
                "selected": "Data",
                "tool_mode": true,
                "types": [
                  "Data"
                ],
                "value": "__UNDEFINED__"
              }
            ],
            "pinned": false,
            "score": 0.01857804455091699,
            "template": {
              "_type": "Component",
              "code": {
                "advanced": true,
                "dynamic": true,
                "fileTypes": [],
                "file_path": "",
                "info": "",
                "list": false,
                "load_from_db": false,
                "multiline": true,
                "name": "code",
                "password": false,
                "placeholder": "",
                "required": true,
                "show": true,
                "title_case": false,
                "type": "code",
                "value": "from langflow.custom import Component\nfrom langflow.helpers.data import data_to_text, data_to_text_list\nfrom langflow.io import DataInput, MultilineInput, Output, StrInput\nfrom langflow.schema import Data\nfrom langflow.schema.message import Message\n\n\nclass ParseDataComponent(Component):\n    display_name = \"Data to Message\"\n    description = \"Convert Data objects into Messages using any {field_name} from input data.\"\n    icon = \"message-square\"\n    name = \"ParseData\"\n    metadata = {\n        \"legacy_name\": \"Parse Data\",\n    }\n\n    inputs = [\n        DataInput(\n            name=\"data\",\n            display_name=\"Data\",\n            info=\"The data to convert to text.\",\n            is_list=True,\n            required=True,\n        ),\n        MultilineInput(\n            name=\"template\",\n            display_name=\"Template\",\n            info=\"The template to use for formatting the data. \"\n            \"It can contain the keys {text}, {data} or any other key in the Data.\",\n            value=\"{text}\",\n            required=True,\n        ),\n        StrInput(name=\"sep\", display_name=\"Separator\", advanced=True, value=\"\\n\"),\n    ]\n\n    outputs = [\n        Output(\n            display_name=\"Message\",\n            name=\"text\",\n            info=\"Data as a single Message, with each input Data separated by Separator\",\n            method=\"parse_data\",\n        ),\n        Output(\n            display_name=\"Data List\",\n            name=\"data_list\",\n            info=\"Data as a list of new Data, each having `text` formatted by Template\",\n            method=\"parse_data_as_list\",\n        ),\n    ]\n\n    def _clean_args(self) -> tuple[list[Data], str, str]:\n        data = self.data if isinstance(self.data, list) else [self.data]\n        template = self.template\n        sep = self.sep\n        return data, template, sep\n\n    def parse_data(self) -> Message:\n        data, template, sep = self._clean_args()\n        result_string = data_to_text(template, data, sep)\n        self.status = result_string\n        return Message(text=result_string)\n\n    def parse_data_as_list(self) -> list[Data]:\n        data, template, _ = self._clean_args()\n        text_list, data_list = data_to_text_list(template, data)\n        for item, text in zip(data_list, text_list, strict=True):\n            item.set_text(text)\n        self.status = data_list\n        return data_list\n"
              },
              "data": {
                "_input_type": "DataInput",
                "advanced": false,
                "display_name": "Data",
                "dynamic": false,
                "info": "The data to convert to text.",
                "input_types": [
                  "Data"
                ],
                "list": true,
                "list_add_label": "Add More",
                "name": "data",
                "placeholder": "",
                "required": true,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "other",
                "value": ""
              },
              "sep": {
                "_input_type": "StrInput",
                "advanced": true,
                "display_name": "Separator",
                "dynamic": false,
                "info": "",
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "sep",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "str",
                "value": "\n"
              },
              "template": {
                "_input_type": "MultilineInput",
                "advanced": false,
                "copy_field": false,
                "display_name": "Template",
                "dynamic": false,
                "info": "The template to use for formatting the data. It can contain the keys {text}, {data} or any other key in the Data.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "multiline": true,
                "name": "template",
                "placeholder": "",
                "required": true,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": "{folderId}"
              }
            },
            "tool_mode": false
          },
          "showNode": true,
          "type": "ParseData"
        },
        "dragging": false,
        "id": "ParseData-AXCBh",
        "measured": {
          "height": 341,
          "width": 320
        },
        "position": {
          "x": 1716.3958637168123,
          "y": -422.854154691587
        },
        "selected": false,
        "type": "genericNode"
      },
      {
        "data": {
          "id": "ParseData-D2m4J",
          "node": {
            "base_classes": [
              "Data",
              "Message"
            ],
            "beta": false,
            "category": "processing",
            "conditional_paths": [],
            "custom_fields": {},
            "description": "Convert Data objects into Messages using any {field_name} from input data.",
            "display_name": "Data to Message",
            "documentation": "",
            "edited": false,
            "field_order": [
              "data",
              "template",
              "sep"
            ],
            "frozen": false,
            "icon": "message-square",
            "key": "ParseData",
            "legacy": false,
            "lf_version": "1.2.0",
            "metadata": {
              "legacy_name": "Parse Data"
            },
            "minimized": false,
            "output_types": [],
            "outputs": [
              {
                "allows_loop": false,
                "cache": true,
                "display_name": "Message",
                "method": "parse_data",
                "name": "text",
                "selected": "Message",
                "tool_mode": true,
                "types": [
                  "Message"
                ],
                "value": "__UNDEFINED__"
              },
              {
                "allows_loop": false,
                "cache": true,
                "display_name": "Data List",
                "method": "parse_data_as_list",
                "name": "data_list",
                "selected": "Data",
                "tool_mode": true,
                "types": [
                  "Data"
                ],
                "value": "__UNDEFINED__"
              }
            ],
            "pinned": false,
            "score": 0.01857804455091699,
            "template": {
              "_type": "Component",
              "code": {
                "advanced": true,
                "dynamic": true,
                "fileTypes": [],
                "file_path": "",
                "info": "",
                "list": false,
                "load_from_db": false,
                "multiline": true,
                "name": "code",
                "password": false,
                "placeholder": "",
                "required": true,
                "show": true,
                "title_case": false,
                "type": "code",
                "value": "from langflow.custom import Component\nfrom langflow.helpers.data import data_to_text, data_to_text_list\nfrom langflow.io import DataInput, MultilineInput, Output, StrInput\nfrom langflow.schema import Data\nfrom langflow.schema.message import Message\n\n\nclass ParseDataComponent(Component):\n    display_name = \"Data to Message\"\n    description = \"Convert Data objects into Messages using any {field_name} from input data.\"\n    icon = \"message-square\"\n    name = \"ParseData\"\n    metadata = {\n        \"legacy_name\": \"Parse Data\",\n    }\n\n    inputs = [\n        DataInput(\n            name=\"data\",\n            display_name=\"Data\",\n            info=\"The data to convert to text.\",\n            is_list=True,\n            required=True,\n        ),\n        MultilineInput(\n            name=\"template\",\n            display_name=\"Template\",\n            info=\"The template to use for formatting the data. \"\n            \"It can contain the keys {text}, {data} or any other key in the Data.\",\n            value=\"{text}\",\n            required=True,\n        ),\n        StrInput(name=\"sep\", display_name=\"Separator\", advanced=True, value=\"\\n\"),\n    ]\n\n    outputs = [\n        Output(\n            display_name=\"Message\",\n            name=\"text\",\n            info=\"Data as a single Message, with each input Data separated by Separator\",\n            method=\"parse_data\",\n        ),\n        Output(\n            display_name=\"Data List\",\n            name=\"data_list\",\n            info=\"Data as a list of new Data, each having `text` formatted by Template\",\n            method=\"parse_data_as_list\",\n        ),\n    ]\n\n    def _clean_args(self) -> tuple[list[Data], str, str]:\n        data = self.data if isinstance(self.data, list) else [self.data]\n        template = self.template\n        sep = self.sep\n        return data, template, sep\n\n    def parse_data(self) -> Message:\n        data, template, sep = self._clean_args()\n        result_string = data_to_text(template, data, sep)\n        self.status = result_string\n        return Message(text=result_string)\n\n    def parse_data_as_list(self) -> list[Data]:\n        data, template, _ = self._clean_args()\n        text_list, data_list = data_to_text_list(template, data)\n        for item, text in zip(data_list, text_list, strict=True):\n            item.set_text(text)\n        self.status = data_list\n        return data_list\n"
              },
              "data": {
                "_input_type": "DataInput",
                "advanced": false,
                "display_name": "Data",
                "dynamic": false,
                "info": "The data to convert to text.",
                "input_types": [
                  "Data"
                ],
                "list": true,
                "list_add_label": "Add More",
                "name": "data",
                "placeholder": "",
                "required": true,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "other",
                "value": ""
              },
              "sep": {
                "_input_type": "StrInput",
                "advanced": true,
                "display_name": "Separator",
                "dynamic": false,
                "info": "",
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "sep",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "str",
                "value": "\n"
              },
              "template": {
                "_input_type": "MultilineInput",
                "advanced": false,
                "copy_field": false,
                "display_name": "Template",
                "dynamic": false,
                "info": "The template to use for formatting the data. It can contain the keys {text}, {data} or any other key in the Data.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "multiline": true,
                "name": "template",
                "placeholder": "",
                "required": true,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": "Summary ({title}_v{version}).txt"
              }
            },
            "tool_mode": false
          },
          "showNode": true,
          "type": "ParseData"
        },
        "dragging": false,
        "id": "ParseData-D2m4J",
        "measured": {
          "height": 341,
          "width": 320
        },
        "position": {
          "x": 1721.8301749927407,
          "y": 283.22646250966943
        },
        "selected": false,
        "type": "genericNode"
      },
      {
        "data": {
          "id": "OnlyofficeDocspaceUploadFile-PjLJ7",
          "node": {
            "base_classes": [
              "Data"
            ],
            "beta": false,
            "category": "onlyoffice",
            "conditional_paths": [],
            "custom_fields": {},
            "description": "Upload a file to ONLYOFFICE DocSpace.",
            "display_name": "Upload File",
            "documentation": "",
            "edited": false,
            "field_order": [
              "auth_text",
              "folder_id",
              "filename",
              "content"
            ],
            "frozen": false,
            "icon": "onlyoffice",
            "key": "OnlyofficeDocspaceUploadFile",
            "legacy": false,
            "lf_version": "1.2.0",
            "metadata": {},
            "minimized": false,
            "output_types": [],
            "outputs": [
              {
                "allows_loop": false,
                "cache": true,
                "display_name": "Data",
                "method": "build_data",
                "name": "api_build_data",
                "selected": "Data",
                "tool_mode": true,
                "types": [
                  "Data"
                ],
                "value": "__UNDEFINED__"
              }
            ],
            "pinned": false,
            "score": 0.0004518559443749226,
            "template": {
              "_type": "Component",
              "auth_text": {
                "_input_type": "SecretStrInput",
                "advanced": true,
                "display_name": "Text from Basic Authentication",
                "dynamic": false,
                "info": "Text output from the Basic Authentication component.",
                "input_types": [
                  "Message"
                ],
                "load_from_db": false,
                "name": "auth_text",
                "password": true,
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "type": "str",
                "value": ""
              },
              "code": {
                "advanced": true,
                "dynamic": true,
                "fileTypes": [],
                "file_path": "",
                "info": "",
                "list": false,
                "load_from_db": false,
                "multiline": true,
                "name": "code",
                "password": false,
                "placeholder": "",
                "required": true,
                "show": true,
                "title_case": false,
                "type": "code",
                "value": "import math\nfrom datetime import datetime, timezone\nfrom typing import Any\n\nfrom langflow.base.onlyoffice.docspace import (\n    AuthTextInput,\n    Component,\n    CreateSessionOptions,\n    DataOutput,\n    ErrorResponse,\n    FolderIdInput,\n    UploadChunkOptions,\n)\nfrom langflow.inputs import MessageTextInput\nfrom langflow.schema import Data\n\nMAX_CHUNK_SIZE = 1024 * 1024 * 10 # 10mb\n\n\nclass OnlyofficeDocspaceUploadFile(Component):\n    display_name = \"Upload File\"\n    description = \"Upload a file to ONLYOFFICE DocSpace.\"\n    name = \"OnlyofficeDocspaceUploadFile\"\n\n\n    inputs = [\n        AuthTextInput(),\n        FolderIdInput(info=\"The ID of the folder to upload the file to.\"),\n        MessageTextInput(\n            name=\"filename\",\n            display_name=\"Filename\",\n            info=\"The name of the file to upload.\",\n        ),\n        MessageTextInput(\n            name=\"content\",\n            display_name=\"Content\",\n            info=\"The content of the file to upload.\",\n        ),\n    ]\n\n\n    outputs = [\n        DataOutput(),\n    ]\n\n\n    async def build_data(self) -> Data:\n        data = await self._upload_file()\n        return Data(data=data)\n\n\n    async def _upload_file(self) -> Any:\n        client = await self._get_client()\n\n        filesize = len(self.content)\n        create_on = datetime.now(timezone.utc).isoformat()\n\n        session_options = CreateSessionOptions(\n            folderId=self.folder_id,\n            FileName=self.filename,\n            FileSize=filesize,\n            CreateOn=create_on,\n        )\n\n        session_result, response = client.files.create_session(self.folder_id, session_options)\n        if isinstance(response, ErrorResponse):\n            raise response.exception\n\n        chunks = math.ceil(filesize / MAX_CHUNK_SIZE)\n\n        for index in range(chunks):\n            session_id = session_result[\"data\"][\"id\"]\n            start = index * MAX_CHUNK_SIZE\n            end = (index + 1) * MAX_CHUNK_SIZE\n            chunk = self.content[start:end].encode(\"utf-8\")\n\n            upload_options = UploadChunkOptions(\n                filename=self.filename,\n                chunk=chunk,\n            )\n\n            upload_result, response = client.files.upload_chunk(session_id, upload_options)\n            if isinstance(response, ErrorResponse):\n                raise response.exception\n\n        return upload_result\n"
              },
              "content": {
                "_input_type": "MessageTextInput",
                "advanced": false,
                "display_name": "Content",
                "dynamic": false,
                "info": "The content of the file to upload.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "content",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "filename": {
                "_input_type": "MessageTextInput",
                "advanced": false,
                "display_name": "Filename",
                "dynamic": false,
                "info": "The name of the file to upload.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "filename",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "folder_id": {
                "_input_type": "MessageTextInput",
                "advanced": false,
                "display_name": "Folder ID",
                "dynamic": false,
                "info": "The ID of the folder to upload the file to.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "folder_id",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              }
            },
            "tool_mode": false
          },
          "showNode": true,
          "type": "OnlyofficeDocspaceUploadFile"
        },
        "dragging": false,
        "id": "OnlyofficeDocspaceUploadFile-PjLJ7",
        "measured": {
          "height": 393,
          "width": 320
        },
        "position": {
          "x": 2502.221520020976,
          "y": 366.0911964320551
        },
        "selected": false,
        "type": "genericNode"
      }
    ],
    "viewport": {
      "x": 78.69170742281995,
      "y": 75.81526558426634,
      "zoom": 0.455107149018668
    }
  },
  "description": "Summarize file and save inside txt file",
  "endpoint_name": null,
  "id": "1eab033d-b8db-43e1-b257-fdd3f6750ca8",
  "is_component": false,
  "last_tested_version": "1.2.0",
  "name": "summarize_to_file",
  "tags": []
}